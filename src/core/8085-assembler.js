/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { machineCode: peg$parsemachineCode },
      peg$startRuleFunction  = peg$parsemachineCode,

      peg$c0 = function(prg) {
          var i = 0,
              line,
              lines = prg.length,
              data,
              dataVal,
              objCode = [];


          for (i = 0; i < lines; i += 1) {
              line = prg[i];

              if (line == null) continue;

              if (!line.opcode) {
              	if (Array.isArray(line.data)) {
                  	objCode = objCode.concat(line.data.map(function (d) {
                      	return { data: d.value, kind: 'data', location: d.location };
                      }));
                  }
                  continue;
              };

              if (line.size === 1) {
                  objCode.push({ data: line.opcode, kind: 'code', location: line.location });
              } else if (line.size === 2) {
                  data = line.data.value;
                  if (typeof line.data.value === "string" && !symbolTable[line.data.value]) {
                      var e = new Error();
                      e.message = "Label " + line.data.value + " is not defined.";
                      e.location = line.location;
                      if (typeof line !== "undefined" && typeof column !== "undefined") {
                          e.line = line; e.column = column;
                      }
                      throw e;
                  }

                  dataVal = (typeof line.data.value === "string")
                      ? line.data.type === "direct"
                      ? symbolTable[line.data.value].addr
                      : symbolTable[line.data.value].value
                      : (typeof line.data.value === "number") ? line.data.value
                      : typeof line.data.value === "object" && line.data.value.value ? line.data.value.value
                      : 0;
                  if (dataVal < 0) {
                      dataVal = twosComplement(dataVal);
                  }
                  objCode.push({ data: line.opcode, kind: 'code', location: line.location });
                  objCode.push({ data: dataVal, kind: 'data', location: line.data.location });
              } else {
                  data = line.data.value;
                  if (typeof line.data.value === "string" && !symbolTable[line.data.value]) {
                      var e = new Error();
                      e.message = "Label " + line.data.value + " is not defined.";
                      e.location = line.location;
                      if (typeof line !== "undefined" && typeof column !== "undefined") {
                          e.line = line; e.column = column;
                      }
                      throw e;
                  }


                  dataVal = (typeof line.data.value === "string")
                      ? line.data.type === "direct"
                      ? symbolTable[line.data.value].addr
                      : symbolTable[line.data.value].value
                      : (typeof line.data.value === "number") ? line.data.value
                      : typeof line.data.value === "object" && line.data.value.value ? line.data.value.value
                      : 0;
                  objCode.push({ data: line.opcode, kind: 'code', location: line.location });
                  objCode.push({ data: dataVal & 0xFF, kind: 'data', location: line.data.location });
                  objCode.push({ data: dataVal >> 8, kind: 'data', location: line.data.location });
              }
          }

          return objCode;
      },
      peg$c1 = function(first, l) {return l},
      peg$c2 = function(first, rest) {return [first].concat(rest);},
      peg$c3 = function(label, op) {
          if (label && label !== "") {
              symbolTable[label.value] = {
                  addr: ilc,
                  value: op.opcode != null ? op.opcode :
                      op.data ? Array.isArray(op.data) ? op.data[0].value : op.data.value : null
              };
          }

          if (op !== null) {
            ilc += op.size;
            return op;
          }
      },
      peg$c4 = peg$otherExpectation("Error in this line"),
      peg$c5 = peg$anyExpectation(),
      peg$c6 = function(lineWithError) {
          var content = lineWithError.join("");
          error("Failed to compile this line.");
          return false;
      },
      peg$c7 = ":",
      peg$c8 = peg$literalExpectation(":", false),
      peg$c9 = function(label) {
          return { value: label.value, location: label.location, type: "definition" }
      },
      peg$c10 = peg$otherExpectation("label"),
      peg$c11 = /^[a-zA-Z?@]/,
      peg$c12 = peg$classExpectation([["a", "z"], ["A", "Z"], "?", "@"], false, false),
      peg$c13 = /^[a-zA-Z0-9]/,
      peg$c14 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false),
      peg$c15 = function(first, rest) {
      	return { value: first + rest.join(""), location: location() };
      },
      peg$c16 = function(lbl) {
          return { value: lbl.value, location: lbl.location, type: "immediate" }
      },
      peg$c17 = function(lbl) {
          return { value: lbl.value, location: lbl.location, type: "direct" }
      },
      peg$c18 = ",",
      peg$c19 = peg$literalExpectation(",", false),
      peg$c20 = function(first, v) { return v; },
      peg$c21 = function(first, rest) {
          return [first].concat(rest);
      },
      peg$c22 = peg$otherExpectation("Register Name"),
      peg$c23 = /^[AaBbCcDdEeHhLlMm]/,
      peg$c24 = peg$classExpectation(["A", "a", "B", "b", "C", "c", "D", "d", "E", "e", "H", "h", "L", "l", "M", "m"], false, false),
      peg$c25 = function(l) { return l.toLowerCase(); },
      peg$c26 = /^[Aa]/,
      peg$c27 = peg$classExpectation(["A", "a"], false, false),
      peg$c28 = peg$otherExpectation("B and C register pair (written as, B or b)"),
      peg$c29 = /^[Bb]/,
      peg$c30 = peg$classExpectation(["B", "b"], false, false),
      peg$c31 = peg$otherExpectation("D and E register pair (written as, D or d)"),
      peg$c32 = /^[Dd]/,
      peg$c33 = peg$classExpectation(["D", "d"], false, false),
      peg$c34 = peg$otherExpectation("H and L register pair (written as, H or h)"),
      peg$c35 = /^[Hh]/,
      peg$c36 = peg$classExpectation(["H", "h"], false, false),
      peg$c37 = peg$otherExpectation("Program status word (Contents of A and status flags, written as PSW or psw)"),
      peg$c38 = "PSW",
      peg$c39 = peg$literalExpectation("PSW", false),
      peg$c40 = "psw",
      peg$c41 = peg$literalExpectation("psw", false),
      peg$c42 = peg$otherExpectation("Stack Pointer (written as, SP or sp)"),
      peg$c43 = "SP",
      peg$c44 = peg$literalExpectation("SP", false),
      peg$c45 = "sp",
      peg$c46 = peg$literalExpectation("sp", false),
      peg$c47 = peg$otherExpectation("comma separated byte values"),
      peg$c48 = function(d, ds) {
        return { value: [d.value].concat(ds.map(function (d_) { return d_[2].value; })), location: location() };
      },
      peg$c49 = peg$otherExpectation("byte"),
      peg$c50 = function(n) {
          if (n > 0xFF) {
              var e = new Error();
              e.message = "8-bit data expected.";
              if (typeof line !== "undefined" && typeof column !== "undefined") {
                  e.line = line; e.column = column;
              }
              throw e;
          } else {
              return { value: n, location: location() };
          }
      },
      peg$c51 = peg$otherExpectation("word"),
      peg$c52 = function(n) {
          if (n > 0xFFFF) {
              var e = new Error();
              e.message = "16-bit data expected.";
              if (typeof line !== "undefined" && typeof column !== "undefined") {
                  e.line = line; e.column = column;
              }
              throw e;
          } else {
              return { value: n, location: location() };
          }
      },
      peg$c53 = peg$otherExpectation("numeric literal"),
      peg$c54 = peg$otherExpectation("decimal literal"),
      peg$c55 = /^[\-]/,
      peg$c56 = peg$classExpectation(["-"], false, false),
      peg$c57 = function(neg, digits) {
          return { value: parseInt((!neg ? "":"-") + digits.join(""), 10), location: location() };
      },
      peg$c58 = "D",
      peg$c59 = peg$literalExpectation("D", false),
      peg$c60 = peg$otherExpectation("hex literal"),
      peg$c61 = "0x",
      peg$c62 = peg$literalExpectation("0x", false),
      peg$c63 = function(hexits) {
          return { value: parseInt(hexits.join(""), 16), location: location() };
      },
      peg$c64 = "H",
      peg$c65 = peg$literalExpectation("H", false),
      peg$c66 = "h",
      peg$c67 = peg$literalExpectation("h", false),
      peg$c68 = peg$otherExpectation("Octal Literal"),
      peg$c69 = "O",
      peg$c70 = peg$literalExpectation("O", false),
      peg$c71 = "Q",
      peg$c72 = peg$literalExpectation("Q", false),
      peg$c73 = "o",
      peg$c74 = peg$literalExpectation("o", false),
      peg$c75 = "q",
      peg$c76 = peg$literalExpectation("q", false),
      peg$c77 = function(octits) {
          return { value: parseInt(octits.join(""), 8), location: location() };
      },
      peg$c78 = peg$otherExpectation("binary literal"),
      peg$c79 = "B",
      peg$c80 = peg$literalExpectation("B", false),
      peg$c81 = function(bits) {
          return { value: parseInt(bits.join(""), 2), location: location() };
      },
      peg$c82 = peg$otherExpectation("identifier"),
      peg$c83 = function(ltrs) {
          return { value: ltrs.join(""), location: location() };
      },
      peg$c84 = peg$otherExpectation("letter/underscore"),
      peg$c85 = /^[a-zA-Z_]/,
      peg$c86 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
      peg$c87 = peg$otherExpectation("digit"),
      peg$c88 = /^[0-9]/,
      peg$c89 = peg$classExpectation([["0", "9"]], false, false),
      peg$c90 = peg$otherExpectation("hex digit"),
      peg$c91 = /^[0-9a-fA-F]/,
      peg$c92 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
      peg$c93 = peg$otherExpectation("octal digit"),
      peg$c94 = /^[0-7]/,
      peg$c95 = peg$classExpectation([["0", "7"]], false, false),
      peg$c96 = peg$otherExpectation("bit"),
      peg$c97 = /^[01]/,
      peg$c98 = peg$classExpectation(["0", "1"], false, false),
      peg$c99 = peg$otherExpectation("expression"),
      peg$c100 = peg$otherExpectation("Arithmetic Expression"),
      peg$c101 = peg$otherExpectation("Addition"),
      peg$c102 = "+",
      peg$c103 = peg$literalExpectation("+", false),
      peg$c104 = function(left, right) {
          return { value: left + right, location: location() };
        },
      peg$c105 = peg$otherExpectation("Subtraction"),
      peg$c106 = "-",
      peg$c107 = peg$literalExpectation("-", false),
      peg$c108 = function(left, right) {
          return { value: left - right, location: location() };
        },
      peg$c109 = peg$otherExpectation("Multiplication"),
      peg$c110 = "*",
      peg$c111 = peg$literalExpectation("*", false),
      peg$c112 = function(left, right) {
          return { value: left * right, location: location() };
        },
      peg$c113 = peg$otherExpectation("Division"),
      peg$c114 = "/",
      peg$c115 = peg$literalExpectation("/", false),
      peg$c116 = function(left, right) {
          return { value: left / right, location: location() };
        },
      peg$c117 = peg$otherExpectation("Modulo"),
      peg$c118 = "mod",
      peg$c119 = peg$literalExpectation("MOD", true),
      peg$c120 = function(left, right) {
          return { value: left % right, location: location() };
        },
      peg$c121 = "(",
      peg$c122 = peg$literalExpectation("(", false),
      peg$c123 = ")",
      peg$c124 = peg$literalExpectation(")", false),
      peg$c125 = function(addition) { return addition; },
      peg$c126 = peg$otherExpectation("Shift Expression"),
      peg$c127 = peg$otherExpectation("Shift Right"),
      peg$c128 = "shr",
      peg$c129 = peg$literalExpectation("SHR", true),
      peg$c130 = function(left, right) {
          return { value: left >> right, location: location() };
        },
      peg$c131 = peg$otherExpectation("Shift Left"),
      peg$c132 = "shl",
      peg$c133 = peg$literalExpectation("SHL", true),
      peg$c134 = function(left, right) {
          return { value: left << right, location: location() };
        },
      peg$c135 = function(shr) { return shr; },
      peg$c136 = peg$otherExpectation("comment"),
      peg$c137 = ";",
      peg$c138 = peg$literalExpectation(";", false),
      peg$c139 = /^[^\n\r\n\u2028\u2029]/,
      peg$c140 = peg$classExpectation(["\n", "\r", "\n", "\u2028", "\u2029"], true, false),
      peg$c141 = function(c) {return c.join("");},
      peg$c142 = peg$otherExpectation("line end"),
      peg$c143 = "\n",
      peg$c144 = peg$literalExpectation("\n", false),
      peg$c145 = "\r\n",
      peg$c146 = peg$literalExpectation("\r\n", false),
      peg$c147 = "\r",
      peg$c148 = peg$literalExpectation("\r", false),
      peg$c149 = "\u2028",
      peg$c150 = peg$literalExpectation("\u2028", false),
      peg$c151 = "\u2029",
      peg$c152 = peg$literalExpectation("\u2029", false),
      peg$c153 = peg$otherExpectation("whitespace"),
      peg$c154 = /^[ \t\x0B\f\xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/,
      peg$c155 = peg$classExpectation([" ", "\t", "\x0B", "\f", "\xA0", "\uFEFF", "\u1680", "\u180E", ["\u2000", "\u200A"], "\u202F", "\u205F", "\u3000"], false, false),
      peg$c156 = function(dir) {
          return {
              opcode: null,
              data: dir.params,
              size: dir.params.length,
              location: location()
          };
      },
      peg$c157 = function(inst) {

          var paramTypes = inst.paramTypes,
              data,
              paramTypesStr = paramTypes.join(","),
              opcode = mnemonics[inst.name.toLowerCase() + (paramTypesStr === "" ? "" : " ") + paramTypesStr];

          if (typeof paramTypes[0] !== "undefined" &&
              (paramTypes[0] === "adr" || paramTypes[0] === "d16" || paramTypes[0] === "d8")) {
              data = inst.params[0];
          }
          else if (typeof paramTypes[1] !== "undefined" &&
              (paramTypes[1] === "adr" || paramTypes[1] === "d16" || paramTypes[1] === "d8")) {
              data = inst.params[1];
          }
          return {
              opcode: opcode.code,
              data: data,
              size: opcode.size,
              location: location()
          };
      },
      peg$c158 = function(op) {
          return {
              name: op,
              paramTypes:[],
              params: []
          };
      },
      peg$c159 = function(op) {
          var name, params, paramTypes;

          if (typeof op === "string") {
              name = op;
              params = [];
              paramTypes = [];
          } else {
              name = op[0];
              paramTypes = [op[2]];
              params = [op[2]];
          }
          return {
              name: name,
              paramTypes: paramTypes,
              params: params
          };
      },
      peg$c160 = function(op) {
          return {
              name: op,
              paramTypes: [],
              params: []
          }
      },
      peg$c161 = function(op) {
          var name = op[0].toLowerCase(),
              params,
              paramTypes;

          if (name === "mov") {
              params = [op[2],op[6]];
              paramTypes = params;
          } else {
              params = [op[2]];
              paramTypes = params;
          }

          return {
              name: name,
              params: params,
              paramTypes: paramTypes
          }
      },
      peg$c162 = function(op) {
          return {
              name: op[0],
              paramTypes: [op[2]],
              params: [op[2]]
          }
      },
      peg$c163 = function(op) {
          var name, params, paramTypes;

          if (typeof op === "string") {
              name = op;
              params = [];
              paramTypes = [];
          } else {
              name = op[0];
              params = [op[2]];
              paramTypes = [op[2]];
          }

          return {
              name: name,
              params: params,
              paramTypes: paramTypes
          };
      },
      peg$c164 = function(op) {
          var name = op[0].toLowerCase(), params, paramTypes;
          if (name === "lxi") {
              params = [op[2],op[6]];
              paramTypes = [op[2],"d16"];
          } else if (name === "mvi") {
              params = [op[2],op[6]];
              paramTypes = [op[2],"d8"];
          } else {
              params = [op[2]];
              paramTypes = ["d8"];
          }

          return {
              name: name,
              params: params,
              paramTypes: paramTypes
          };
      },
      peg$c165 = function(op) {
          return {
              name: op[0],
              params: [op[2]],
              paramTypes: ["adr"]
          }
      },
      peg$c166 = function(op) {
          var name,
              params,
              paramTypes;

          if (typeof op === "string") {
              name = op;
              params = [];
              paramTypes = [];
          } else {
              name = op[0];
              params = [op[2]];
              paramTypes = ["adr"];
          }

          return {
              name: name,
              params: params,
              paramTypes: paramTypes
          };
      },
      peg$c167 = function(op) {
          return {
              name: op[0],
              params: [op[2]],
              paramTypes: ["adr"]
          };
      },
      peg$c168 = function(op) {
          return {
              name: op,
              params: [],
              paramTypes: []
          };
      },
      peg$c169 = function(dir) {
          return {
             name: dir,
             params: dir[2].value.map(function (v) { return v; })
          };
      },
      peg$c170 = "DB",
      peg$c171 = peg$literalExpectation("DB", false),
      peg$c172 = "db",
      peg$c173 = peg$literalExpectation("db", false),
      peg$c174 = "STC",
      peg$c175 = peg$literalExpectation("STC", false),
      peg$c176 = "stc",
      peg$c177 = peg$literalExpectation("stc", false),
      peg$c178 = "CMC",
      peg$c179 = peg$literalExpectation("CMC", false),
      peg$c180 = "cmc",
      peg$c181 = peg$literalExpectation("cmc", false),
      peg$c182 = "CMA",
      peg$c183 = peg$literalExpectation("CMA", false),
      peg$c184 = "cma",
      peg$c185 = peg$literalExpectation("cma", false),
      peg$c186 = "DAA",
      peg$c187 = peg$literalExpectation("DAA", false),
      peg$c188 = "daa",
      peg$c189 = peg$literalExpectation("daa", false),
      peg$c190 = "SPHL",
      peg$c191 = peg$literalExpectation("SPHL", false),
      peg$c192 = "sphl",
      peg$c193 = peg$literalExpectation("sphl", false),
      peg$c194 = "PCHL",
      peg$c195 = peg$literalExpectation("PCHL", false),
      peg$c196 = "pchl",
      peg$c197 = peg$literalExpectation("pchl", false),
      peg$c198 = "HLT",
      peg$c199 = peg$literalExpectation("HLT", false),
      peg$c200 = "hlt",
      peg$c201 = peg$literalExpectation("hlt", false),
      peg$c202 = "RLC",
      peg$c203 = peg$literalExpectation("RLC", false),
      peg$c204 = "rlc",
      peg$c205 = peg$literalExpectation("rlc", false),
      peg$c206 = "RRC",
      peg$c207 = peg$literalExpectation("RRC", false),
      peg$c208 = "rrc",
      peg$c209 = peg$literalExpectation("rrc", false),
      peg$c210 = "RAR",
      peg$c211 = peg$literalExpectation("RAR", false),
      peg$c212 = "rar",
      peg$c213 = peg$literalExpectation("rar", false),
      peg$c214 = "RAL",
      peg$c215 = peg$literalExpectation("RAL", false),
      peg$c216 = "ral",
      peg$c217 = peg$literalExpectation("ral", false),
      peg$c218 = "RET",
      peg$c219 = peg$literalExpectation("RET", false),
      peg$c220 = "ret",
      peg$c221 = peg$literalExpectation("ret", false),
      peg$c222 = "RC",
      peg$c223 = peg$literalExpectation("RC", false),
      peg$c224 = "rc",
      peg$c225 = peg$literalExpectation("rc", false),
      peg$c226 = "RNC",
      peg$c227 = peg$literalExpectation("RNC", false),
      peg$c228 = "rnc",
      peg$c229 = peg$literalExpectation("rnc", false),
      peg$c230 = "RZ",
      peg$c231 = peg$literalExpectation("RZ", false),
      peg$c232 = "rz",
      peg$c233 = peg$literalExpectation("rz", false),
      peg$c234 = "RNZ",
      peg$c235 = peg$literalExpectation("RNZ", false),
      peg$c236 = "rnz",
      peg$c237 = peg$literalExpectation("rnz", false),
      peg$c238 = "RP",
      peg$c239 = peg$literalExpectation("RP", false),
      peg$c240 = "rp",
      peg$c241 = peg$literalExpectation("rp", false),
      peg$c242 = "RM",
      peg$c243 = peg$literalExpectation("RM", false),
      peg$c244 = "rm",
      peg$c245 = peg$literalExpectation("rm", false),
      peg$c246 = "RPE",
      peg$c247 = peg$literalExpectation("RPE", false),
      peg$c248 = "rpe",
      peg$c249 = peg$literalExpectation("rpe", false),
      peg$c250 = "RPO",
      peg$c251 = peg$literalExpectation("RPO", false),
      peg$c252 = "rpo",
      peg$c253 = peg$literalExpectation("rpo", false),
      peg$c254 = "XCHG",
      peg$c255 = peg$literalExpectation("XCHG", false),
      peg$c256 = "xchg",
      peg$c257 = peg$literalExpectation("xchg", false),
      peg$c258 = "XTHL",
      peg$c259 = peg$literalExpectation("XTHL", false),
      peg$c260 = "xthl",
      peg$c261 = peg$literalExpectation("xthl", false),
      peg$c262 = "EI",
      peg$c263 = peg$literalExpectation("EI", false),
      peg$c264 = "ei",
      peg$c265 = peg$literalExpectation("ei", false),
      peg$c266 = "DI",
      peg$c267 = peg$literalExpectation("DI", false),
      peg$c268 = "di",
      peg$c269 = peg$literalExpectation("di", false),
      peg$c270 = "NOP",
      peg$c271 = peg$literalExpectation("NOP", false),
      peg$c272 = "nop",
      peg$c273 = peg$literalExpectation("nop", false),
      peg$c274 = "INR",
      peg$c275 = peg$literalExpectation("INR", false),
      peg$c276 = "inr",
      peg$c277 = peg$literalExpectation("inr", false),
      peg$c278 = "DCR",
      peg$c279 = peg$literalExpectation("DCR", false),
      peg$c280 = "dcr",
      peg$c281 = peg$literalExpectation("dcr", false),
      peg$c282 = "STAX",
      peg$c283 = peg$literalExpectation("STAX", false),
      peg$c284 = "stax",
      peg$c285 = peg$literalExpectation("stax", false),
      peg$c286 = "LDAX",
      peg$c287 = peg$literalExpectation("LDAX", false),
      peg$c288 = "ldax",
      peg$c289 = peg$literalExpectation("ldax", false),
      peg$c290 = "ADD",
      peg$c291 = peg$literalExpectation("ADD", false),
      peg$c292 = "add",
      peg$c293 = peg$literalExpectation("add", false),
      peg$c294 = "ADC",
      peg$c295 = peg$literalExpectation("ADC", false),
      peg$c296 = "adc",
      peg$c297 = peg$literalExpectation("adc", false),
      peg$c298 = "SUB",
      peg$c299 = peg$literalExpectation("SUB", false),
      peg$c300 = "sub",
      peg$c301 = peg$literalExpectation("sub", false),
      peg$c302 = "SBB",
      peg$c303 = peg$literalExpectation("SBB", false),
      peg$c304 = "sbb",
      peg$c305 = peg$literalExpectation("sbb", false),
      peg$c306 = "ANA",
      peg$c307 = peg$literalExpectation("ANA", false),
      peg$c308 = "ana",
      peg$c309 = peg$literalExpectation("ana", false),
      peg$c310 = "XRA",
      peg$c311 = peg$literalExpectation("XRA", false),
      peg$c312 = "xra",
      peg$c313 = peg$literalExpectation("xra", false),
      peg$c314 = "ORA",
      peg$c315 = peg$literalExpectation("ORA", false),
      peg$c316 = "ora",
      peg$c317 = peg$literalExpectation("ora", false),
      peg$c318 = "CMP",
      peg$c319 = peg$literalExpectation("CMP", false),
      peg$c320 = "cmp",
      peg$c321 = peg$literalExpectation("cmp", false),
      peg$c322 = "PUSH",
      peg$c323 = peg$literalExpectation("PUSH", false),
      peg$c324 = "push",
      peg$c325 = peg$literalExpectation("push", false),
      peg$c326 = "POP",
      peg$c327 = peg$literalExpectation("POP", false),
      peg$c328 = "pop",
      peg$c329 = peg$literalExpectation("pop", false),
      peg$c330 = "DAD",
      peg$c331 = peg$literalExpectation("DAD", false),
      peg$c332 = "dad",
      peg$c333 = peg$literalExpectation("dad", false),
      peg$c334 = "INX",
      peg$c335 = peg$literalExpectation("INX", false),
      peg$c336 = "inx",
      peg$c337 = peg$literalExpectation("inx", false),
      peg$c338 = "DCX",
      peg$c339 = peg$literalExpectation("DCX", false),
      peg$c340 = "dcx",
      peg$c341 = peg$literalExpectation("dcx", false),
      peg$c342 = "ADI",
      peg$c343 = peg$literalExpectation("ADI", false),
      peg$c344 = "adi",
      peg$c345 = peg$literalExpectation("adi", false),
      peg$c346 = "ACI",
      peg$c347 = peg$literalExpectation("ACI", false),
      peg$c348 = "aci",
      peg$c349 = peg$literalExpectation("aci", false),
      peg$c350 = "SUI",
      peg$c351 = peg$literalExpectation("SUI", false),
      peg$c352 = "sui",
      peg$c353 = peg$literalExpectation("sui", false),
      peg$c354 = "SBI",
      peg$c355 = peg$literalExpectation("SBI", false),
      peg$c356 = "sbi",
      peg$c357 = peg$literalExpectation("sbi", false),
      peg$c358 = "ANI",
      peg$c359 = peg$literalExpectation("ANI", false),
      peg$c360 = "ani",
      peg$c361 = peg$literalExpectation("ani", false),
      peg$c362 = "XRI",
      peg$c363 = peg$literalExpectation("XRI", false),
      peg$c364 = "xri",
      peg$c365 = peg$literalExpectation("xri", false),
      peg$c366 = "ORI",
      peg$c367 = peg$literalExpectation("ORI", false),
      peg$c368 = "ori",
      peg$c369 = peg$literalExpectation("ori", false),
      peg$c370 = "CPI",
      peg$c371 = peg$literalExpectation("CPI", false),
      peg$c372 = "cpi",
      peg$c373 = peg$literalExpectation("cpi", false),
      peg$c374 = "STA",
      peg$c375 = peg$literalExpectation("STA", false),
      peg$c376 = "sta",
      peg$c377 = peg$literalExpectation("sta", false),
      peg$c378 = "LDA",
      peg$c379 = peg$literalExpectation("LDA", false),
      peg$c380 = "lda",
      peg$c381 = peg$literalExpectation("lda", false),
      peg$c382 = "SHLD",
      peg$c383 = peg$literalExpectation("SHLD", false),
      peg$c384 = "shld",
      peg$c385 = peg$literalExpectation("shld", false),
      peg$c386 = "LHLD",
      peg$c387 = peg$literalExpectation("LHLD", false),
      peg$c388 = "lhld",
      peg$c389 = peg$literalExpectation("lhld", false),
      peg$c390 = "JMP",
      peg$c391 = peg$literalExpectation("JMP", false),
      peg$c392 = "jmp",
      peg$c393 = peg$literalExpectation("jmp", false),
      peg$c394 = "JC",
      peg$c395 = peg$literalExpectation("JC", false),
      peg$c396 = "jc",
      peg$c397 = peg$literalExpectation("jc", false),
      peg$c398 = "JNC",
      peg$c399 = peg$literalExpectation("JNC", false),
      peg$c400 = "jnc",
      peg$c401 = peg$literalExpectation("jnc", false),
      peg$c402 = "JZ",
      peg$c403 = peg$literalExpectation("JZ", false),
      peg$c404 = "jz",
      peg$c405 = peg$literalExpectation("jz", false),
      peg$c406 = "JNZ",
      peg$c407 = peg$literalExpectation("JNZ", false),
      peg$c408 = "jnz",
      peg$c409 = peg$literalExpectation("jnz", false),
      peg$c410 = "JM",
      peg$c411 = peg$literalExpectation("JM", false),
      peg$c412 = "jm",
      peg$c413 = peg$literalExpectation("jm", false),
      peg$c414 = "JP",
      peg$c415 = peg$literalExpectation("JP", false),
      peg$c416 = "jp",
      peg$c417 = peg$literalExpectation("jp", false),
      peg$c418 = "JPE",
      peg$c419 = peg$literalExpectation("JPE", false),
      peg$c420 = "jpe",
      peg$c421 = peg$literalExpectation("jpe", false),
      peg$c422 = "JPO",
      peg$c423 = peg$literalExpectation("JPO", false),
      peg$c424 = "jpo",
      peg$c425 = peg$literalExpectation("jpo", false),
      peg$c426 = "CALL",
      peg$c427 = peg$literalExpectation("CALL", false),
      peg$c428 = "call",
      peg$c429 = peg$literalExpectation("call", false),
      peg$c430 = "CC",
      peg$c431 = peg$literalExpectation("CC", false),
      peg$c432 = "cc",
      peg$c433 = peg$literalExpectation("cc", false),
      peg$c434 = "CNC",
      peg$c435 = peg$literalExpectation("CNC", false),
      peg$c436 = "cnc",
      peg$c437 = peg$literalExpectation("cnc", false),
      peg$c438 = "CZ",
      peg$c439 = peg$literalExpectation("CZ", false),
      peg$c440 = "cz",
      peg$c441 = peg$literalExpectation("cz", false),
      peg$c442 = "CNZ",
      peg$c443 = peg$literalExpectation("CNZ", false),
      peg$c444 = "cnz",
      peg$c445 = peg$literalExpectation("cnz", false),
      peg$c446 = "CM",
      peg$c447 = peg$literalExpectation("CM", false),
      peg$c448 = "cm",
      peg$c449 = peg$literalExpectation("cm", false),
      peg$c450 = "CP",
      peg$c451 = peg$literalExpectation("CP", false),
      peg$c452 = "cp",
      peg$c453 = peg$literalExpectation("cp", false),
      peg$c454 = "CPE",
      peg$c455 = peg$literalExpectation("CPE", false),
      peg$c456 = "cpe",
      peg$c457 = peg$literalExpectation("cpe", false),
      peg$c458 = "CPO",
      peg$c459 = peg$literalExpectation("CPO", false),
      peg$c460 = "cpo",
      peg$c461 = peg$literalExpectation("cpo", false),
      peg$c462 = peg$otherExpectation("MOV is incomplete"),
      peg$c463 = "MOV",
      peg$c464 = peg$literalExpectation("MOV", false),
      peg$c465 = "mov",
      peg$c466 = peg$literalExpectation("mov", false),
      peg$c467 = /^[,]/,
      peg$c468 = peg$classExpectation([","], false, false),
      peg$c469 = "LXI",
      peg$c470 = peg$literalExpectation("LXI", false),
      peg$c471 = "lxi",
      peg$c472 = peg$literalExpectation("lxi", false),
      peg$c473 = "MVI",
      peg$c474 = peg$literalExpectation("MVI", false),
      peg$c475 = "mvi",
      peg$c476 = peg$literalExpectation("mvi", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsemachineCode() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseprogram();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseprogram() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseline();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseeol();
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseeol();
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseline();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c1(s2, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseeol();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseeol();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseline();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c1(s2, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopWithLabel() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parselabelPart();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseoperation();
      if (s2 === peg$FAILED) {
        s2 = peg$parsedirective();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseline() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopWithLabel();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomment();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse__();
        if (s1 !== peg$FAILED) {
          s2 = peg$parselineError();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parselineError() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }

    return s0;
  }

  function peg$parselabelPart() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parselabel();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsewhitespace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsewhitespace();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselabel() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c11.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c13.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c13.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }

    return s0;
  }

  function peg$parselabelImmediate() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parselabel();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c16(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }

    return s0;
  }

  function peg$parselabelDirect() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parselabel();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c17(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }

    return s0;
  }

  function peg$parseparamList() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhitespace();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevalue();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parsewhitespace();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parsewhitespace();
        }
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c18;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parsewhitespace();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parsewhitespace();
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsevalue();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c20(s2, s8);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parsewhitespace();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsewhitespace();
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c18;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parsewhitespace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsewhitespace();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsevalue();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$c20(s2, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalue() {
    var s0;

    s0 = peg$parseregister();
    if (s0 === peg$FAILED) {
      s0 = peg$parselabel();
    }

    return s0;
  }

  function peg$parseregister() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c23.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c25(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }

    return s0;
  }

  function peg$parseregisterA() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c26.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c25(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseregisterPair() {
    var s0;

    s0 = peg$parseregisterPairB();
    if (s0 === peg$FAILED) {
      s0 = peg$parseregisterPairD();
      if (s0 === peg$FAILED) {
        s0 = peg$parseregisterPairH();
      }
    }

    return s0;
  }

  function peg$parseregisterPairB() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c29.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c25(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }

    return s0;
  }

  function peg$parseregisterPairD() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c32.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c25(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }

    return s0;
  }

  function peg$parseregisterPairH() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c35.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c25(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }

    return s0;
  }

  function peg$parseregisterPairPSW() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c40) {
        s1 = peg$c40;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c25(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }

    return s0;
  }

  function peg$parsestackPointer() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c45) {
        s1 = peg$c45;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c25(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }

    return s0;
  }

  function peg$parsedata8_list() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedata8();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c18;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsedata8();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c18;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsedata8();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c48(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }

    return s0;
  }

  function peg$parsedata16_list() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedata16();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c18;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse__();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsedata16();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c18;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsedata16();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c48(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }

    return s0;
  }

  function peg$parsedata8() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenumLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c50(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c49); }
    }

    return s0;
  }

  function peg$parsedata16() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenumLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c52(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }

    return s0;
  }

  function peg$parsenumLiteral() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsebinLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parsehexLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseoctalLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedecLiteral();
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c53); }
    }

    return s0;
  }

  function peg$parsedecLiteral() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsedecForm1();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedecForm2();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }

    return s0;
  }

  function peg$parsedecForm1() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c55.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsedigit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsedigit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c57(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedecForm2() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c55.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsedigit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsedigit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 68) {
          s3 = peg$c58;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c59); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c57(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehexLiteral() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsehexForm1();
    if (s0 === peg$FAILED) {
      s0 = peg$parsehexForm2();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }

    return s0;
  }

  function peg$parsehexForm1() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c61) {
      s1 = peg$c61;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsehexit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsehexit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c63(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehexForm2() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsehexit();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsehexit();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 72) {
        s2 = peg$c64;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 104) {
          s2 = peg$c66;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c63(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoctalLiteral() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseoctit();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseoctit();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 79) {
        s2 = peg$c69;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 81) {
          s2 = peg$c71;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 111) {
            s2 = peg$c73;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 113) {
              s2 = peg$c75;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c77(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }

    return s0;
  }

  function peg$parsebinLiteral() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsebit();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsebit();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 66) {
        s2 = peg$c79;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c81(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }

    return s0;
  }

  function peg$parseidentifier() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseidentLetter();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseidentLetter();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c83(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }

    return s0;
  }

  function peg$parseidentLetter() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c85.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c86); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c84); }
    }

    return s0;
  }

  function peg$parsedigit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c88.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c89); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c87); }
    }

    return s0;
  }

  function peg$parsehexit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c91.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c92); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }

    return s0;
  }

  function peg$parseoctit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c94.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c93); }
    }

    return s0;
  }

  function peg$parsebit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c97.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c96); }
    }

    return s0;
  }

  function peg$parseexpression() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsearithmetic();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c99); }
    }

    return s0;
  }

  function peg$parsearithmetic() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseaddition();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }

    return s0;
  }

  function peg$parseaddition() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsesubtraction();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s3 = peg$c102;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseaddition();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c104(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesubtraction();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c101); }
    }

    return s0;
  }

  function peg$parsesubtraction() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsemultiplication();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c106;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesubtraction();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c108(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsemultiplication();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c105); }
    }

    return s0;
  }

  function peg$parsemultiplication() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedivision();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s3 = peg$c110;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemultiplication();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c112(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsedivision();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }

    return s0;
  }

  function peg$parsedivision() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsemodulo();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s3 = peg$c114;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedivision();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c116(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsemodulo();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c113); }
    }

    return s0;
  }

  function peg$parsemodulo() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenumLiteral();
    if (s1 === peg$FAILED) {
      s1 = peg$parselabel();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c118) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c119); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemodulo();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c120(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parselabel();
        if (s0 === peg$FAILED) {
          s0 = peg$parseshift();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
              s1 = peg$c121;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c122); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseaddition();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s3 = peg$c123;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c124); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c125(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c117); }
    }

    return s0;
  }

  function peg$parseshift() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseshiftRight();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c126); }
    }

    return s0;
  }

  function peg$parseshiftRight() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseshiftLeft();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c128) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseshiftRight();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c130(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseshiftLeft();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c127); }
    }

    return s0;
  }

  function peg$parseshiftLeft() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenumLiteral();
    if (s1 === peg$FAILED) {
      s1 = peg$parselabel();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c132) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c133); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseshiftLeft();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c134(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parselabelImmediate();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c121;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c122); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseshift();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s3 = peg$c123;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c124); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c135(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c131); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c137;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c139.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c140); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c139.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c141(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c136); }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    s0 = [];
    s1 = peg$parsewhitespace();
    if (s1 === peg$FAILED) {
      s1 = peg$parseeol();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseeol();
      }
    }

    return s0;
  }

  function peg$parseeol() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c143;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c144); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c145) {
        s0 = peg$c145;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c146); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c147;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c148); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8232) {
            s0 = peg$c149;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c150); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8233) {
              s0 = peg$c151;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c152); }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c142); }
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c154.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c155); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c153); }
    }

    return s0;
  }

  function peg$parsedirective() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedataDefinition();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c156(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoperation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecarryBitInstructions();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesingleRegInstructions();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenopInstruction();
        if (s1 === peg$FAILED) {
          s1 = peg$parsedataTransferInstructions();
          if (s1 === peg$FAILED) {
            s1 = peg$parseregOrMemToAccInstructions();
            if (s1 === peg$FAILED) {
              s1 = peg$parserotateAccInstructions();
              if (s1 === peg$FAILED) {
                s1 = peg$parseregPairInstructions();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseimmediateInstructions();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsedirectAddressingInstructions();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsejumpInstructions();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parsecallInstructions();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsereturnInstructions();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsehaltInstruction();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c157(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecarryBitInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_stc();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_cmc();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c158(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesingleRegInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_inr();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_dcr();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_cma();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_daa();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c159(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenopInstruction() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_nop();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c160(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedataTransferInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_mov();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_stax();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_ldax();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c161(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseregOrMemToAccInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_add();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_adc();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_sub();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_sbb();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_ana();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_xra();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_ora();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_cmp();
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c162(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parserotateAccInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_rlc();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_rrc();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_ral();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_rar();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c160(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseregPairInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_push();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_pop();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_dad();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_inx();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_dcx();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_xchg();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_xthl();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_sphl();
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c163(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseimmediateInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_lxi();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_mvi();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_adi();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_aci();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_sui();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_sbi();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_ani();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_xri();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseop_ori();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseop_cpi();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c164(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedirectAddressingInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_sta();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_lda();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_shld();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_lhld();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c165(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsejumpInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_pchl();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_jmp();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_jc();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_jnc();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_jz();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_jnz();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_jp();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_jm();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseop_jpe();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseop_jpo();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c166(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecallInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_call();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_cc();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_cnc();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_cz();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_cnz();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_cp();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_cm();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_cpe();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseop_cpo();
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c167(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsereturnInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_ret();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_rc();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_rnc();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_rz();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_rnz();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_rm();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_rp();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_rpe();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseop_rpo();
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c168(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsehaltInstruction() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_hlt();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c168(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedataDefinition() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedir_db();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c169(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedir_db() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c170) {
      s1 = peg$c170;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c171); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c172) {
        s1 = peg$c172;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata8_list();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_stc() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c174) {
      s0 = peg$c174;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c175); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c176) {
        s0 = peg$c176;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
    }

    return s0;
  }

  function peg$parseop_cmc() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c178) {
      s0 = peg$c178;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c179); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c180) {
        s0 = peg$c180;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c181); }
      }
    }

    return s0;
  }

  function peg$parseop_cma() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c182) {
      s0 = peg$c182;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c183); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c184) {
        s0 = peg$c184;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c185); }
      }
    }

    return s0;
  }

  function peg$parseop_daa() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c186) {
      s0 = peg$c186;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c187); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c188) {
        s0 = peg$c188;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c189); }
      }
    }

    return s0;
  }

  function peg$parseop_sphl() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c190) {
      s0 = peg$c190;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c191); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c192) {
        s0 = peg$c192;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }
    }

    return s0;
  }

  function peg$parseop_pchl() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c194) {
      s0 = peg$c194;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c195); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c196) {
        s0 = peg$c196;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c197); }
      }
    }

    return s0;
  }

  function peg$parseop_hlt() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c198) {
      s0 = peg$c198;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c199); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c200) {
        s0 = peg$c200;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c201); }
      }
    }

    return s0;
  }

  function peg$parseop_rlc() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c202) {
      s0 = peg$c202;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c203); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c204) {
        s0 = peg$c204;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c205); }
      }
    }

    return s0;
  }

  function peg$parseop_rrc() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c206) {
      s0 = peg$c206;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c207); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c208) {
        s0 = peg$c208;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c209); }
      }
    }

    return s0;
  }

  function peg$parseop_rar() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c210) {
      s0 = peg$c210;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c211); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c212) {
        s0 = peg$c212;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }
    }

    return s0;
  }

  function peg$parseop_ral() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c214) {
      s0 = peg$c214;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c215); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c216) {
        s0 = peg$c216;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c217); }
      }
    }

    return s0;
  }

  function peg$parseop_ret() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c218) {
      s0 = peg$c218;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c219); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c220) {
        s0 = peg$c220;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }
    }

    return s0;
  }

  function peg$parseop_rc() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c222) {
      s0 = peg$c222;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c223); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c224) {
        s0 = peg$c224;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }
    }

    return s0;
  }

  function peg$parseop_rnc() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c226) {
      s0 = peg$c226;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c227); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c228) {
        s0 = peg$c228;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }
    }

    return s0;
  }

  function peg$parseop_rz() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c230) {
      s0 = peg$c230;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c231); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c232) {
        s0 = peg$c232;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c233); }
      }
    }

    return s0;
  }

  function peg$parseop_rnz() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c234) {
      s0 = peg$c234;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c235); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c236) {
        s0 = peg$c236;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }
    }

    return s0;
  }

  function peg$parseop_rp() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c238) {
      s0 = peg$c238;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c239); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c240) {
        s0 = peg$c240;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c241); }
      }
    }

    return s0;
  }

  function peg$parseop_rm() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c242) {
      s0 = peg$c242;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c243); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c244) {
        s0 = peg$c244;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c245); }
      }
    }

    return s0;
  }

  function peg$parseop_rpe() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c246) {
      s0 = peg$c246;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c247); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c248) {
        s0 = peg$c248;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c249); }
      }
    }

    return s0;
  }

  function peg$parseop_rpo() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c250) {
      s0 = peg$c250;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c251); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c252) {
        s0 = peg$c252;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c253); }
      }
    }

    return s0;
  }

  function peg$parseop_xchg() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c254) {
      s0 = peg$c254;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c255); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c256) {
        s0 = peg$c256;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c257); }
      }
    }

    return s0;
  }

  function peg$parseop_xthl() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c258) {
      s0 = peg$c258;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c259); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c260) {
        s0 = peg$c260;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c261); }
      }
    }

    return s0;
  }

  function peg$parseop_ei() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c262) {
      s0 = peg$c262;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c263); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c264) {
        s0 = peg$c264;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c265); }
      }
    }

    return s0;
  }

  function peg$parseop_di() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c266) {
      s0 = peg$c266;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c267); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c268) {
        s0 = peg$c268;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c269); }
      }
    }

    return s0;
  }

  function peg$parseop_nop() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c270) {
      s0 = peg$c270;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c271); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c272) {
        s0 = peg$c272;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }
    }

    return s0;
  }

  function peg$parseop_inr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c274) {
      s1 = peg$c274;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c275); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c276) {
        s1 = peg$c276;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c277); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_dcr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c278) {
      s1 = peg$c278;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c279); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c280) {
        s1 = peg$c280;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c281); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_stax() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c282) {
      s1 = peg$c282;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c283); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c284) {
        s1 = peg$c284;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c285); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPairB();
        if (s3 === peg$FAILED) {
          s3 = peg$parseregisterPairD();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_ldax() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c286) {
      s1 = peg$c286;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c287); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c288) {
        s1 = peg$c288;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c289); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPairB();
        if (s3 === peg$FAILED) {
          s3 = peg$parseregisterPairD();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_add() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c290) {
      s1 = peg$c290;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c291); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c292) {
        s1 = peg$c292;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c293); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_adc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c294) {
      s1 = peg$c294;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c295); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c296) {
        s1 = peg$c296;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c297); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_sub() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c298) {
      s1 = peg$c298;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c299); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c300) {
        s1 = peg$c300;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c301); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_sbb() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c302) {
      s1 = peg$c302;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c303); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c304) {
        s1 = peg$c304;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c305); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_ana() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c306) {
      s1 = peg$c306;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c307); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c308) {
        s1 = peg$c308;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c309); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_xra() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c310) {
      s1 = peg$c310;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c311); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c312) {
        s1 = peg$c312;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c313); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_ora() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c314) {
      s1 = peg$c314;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c315); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c316) {
        s1 = peg$c316;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c317); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cmp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c318) {
      s1 = peg$c318;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c319); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c320) {
        s1 = peg$c320;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_push() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c322) {
      s1 = peg$c322;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c323); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c324) {
        s1 = peg$c324;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c325); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parseregisterPairPSW();
          if (s3 === peg$FAILED) {
            s3 = peg$parseregisterA();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_pop() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c326) {
      s1 = peg$c326;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c327); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c328) {
        s1 = peg$c328;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c329); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parseregisterPairPSW();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_dad() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c330) {
      s1 = peg$c330;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c331); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c332) {
        s1 = peg$c332;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c333); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parsestackPointer();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_inx() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c334) {
      s1 = peg$c334;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c335); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c336) {
        s1 = peg$c336;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c337); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parsestackPointer();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_dcx() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c338) {
      s1 = peg$c338;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c339); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c340) {
        s1 = peg$c340;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c341); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parsestackPointer();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_adi() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c342) {
      s1 = peg$c342;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c343); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c344) {
        s1 = peg$c344;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c345); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata8();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelImmediate();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_aci() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c346) {
      s1 = peg$c346;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c347); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c348) {
        s1 = peg$c348;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c349); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata8();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelImmediate();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_sui() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c350) {
      s1 = peg$c350;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c351); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c352) {
        s1 = peg$c352;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c353); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata8();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelImmediate();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_sbi() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c354) {
      s1 = peg$c354;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c355); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c356) {
        s1 = peg$c356;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c357); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata8();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelImmediate();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_ani() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c358) {
      s1 = peg$c358;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c359); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c360) {
        s1 = peg$c360;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c361); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata8();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelImmediate();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_xri() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c362) {
      s1 = peg$c362;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c363); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c364) {
        s1 = peg$c364;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c365); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata8();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelImmediate();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_ori() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c366) {
      s1 = peg$c366;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c367); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c368) {
        s1 = peg$c368;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c369); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata8();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelImmediate();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cpi() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c370) {
      s1 = peg$c370;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c371); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c372) {
        s1 = peg$c372;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c373); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata8();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelImmediate();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_sta() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c374) {
      s1 = peg$c374;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c375); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c376) {
        s1 = peg$c376;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c377); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_lda() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c378) {
      s1 = peg$c378;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c379); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c380) {
        s1 = peg$c380;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c381); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_shld() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c382) {
      s1 = peg$c382;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c383); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c384) {
        s1 = peg$c384;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c385); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_lhld() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c386) {
      s1 = peg$c386;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c387); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c388) {
        s1 = peg$c388;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c389); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jmp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c390) {
      s1 = peg$c390;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c391); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c392) {
        s1 = peg$c392;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c393); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelDirect();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c394) {
      s1 = peg$c394;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c395); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c396) {
        s1 = peg$c396;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c397); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelDirect();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jnc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c398) {
      s1 = peg$c398;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c399); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c400) {
        s1 = peg$c400;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c401); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelDirect();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jz() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c402) {
      s1 = peg$c402;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c403); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c404) {
        s1 = peg$c404;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c405); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelDirect();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jnz() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c406) {
      s1 = peg$c406;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c407); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c408) {
        s1 = peg$c408;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c409); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelDirect();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jm() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c410) {
      s1 = peg$c410;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c411); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c412) {
        s1 = peg$c412;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c413); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelDirect();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c414) {
      s1 = peg$c414;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c415); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c416) {
        s1 = peg$c416;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c417); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelDirect();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jpe() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c418) {
      s1 = peg$c418;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c419); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c420) {
        s1 = peg$c420;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c421); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelDirect();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jpo() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c422) {
      s1 = peg$c422;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c423); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c424) {
        s1 = peg$c424;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c425); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselabelDirect();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_call() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c426) {
      s1 = peg$c426;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c427); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c428) {
        s1 = peg$c428;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c429); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c430) {
      s1 = peg$c430;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c431); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c432) {
        s1 = peg$c432;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c433); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cnc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c434) {
      s1 = peg$c434;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c435); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c436) {
        s1 = peg$c436;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c437); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cz() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c438) {
      s1 = peg$c438;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c439); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c440) {
        s1 = peg$c440;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c441); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cnz() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c442) {
      s1 = peg$c442;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c443); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c444) {
        s1 = peg$c444;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c445); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cm() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c446) {
      s1 = peg$c446;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c447); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c448) {
        s1 = peg$c448;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c449); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c450) {
      s1 = peg$c450;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c451); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c452) {
        s1 = peg$c452;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c453); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cpe() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c454) {
      s1 = peg$c454;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c455); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c456) {
        s1 = peg$c456;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c457); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cpo() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c458) {
      s1 = peg$c458;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c459); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c460) {
        s1 = peg$c460;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c461); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedata16();
        if (s3 === peg$FAILED) {
          s3 = peg$parselabelDirect();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_mov() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c463) {
      s1 = peg$c463;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c464); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c465) {
        s1 = peg$c465;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c466); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            if (peg$c467.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c468); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseregister();
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c462); }
    }

    return s0;
  }

  function peg$parseop_lxi() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c469) {
      s1 = peg$c469;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c470); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c471) {
        s1 = peg$c471;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c472); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parsestackPointer();
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            if (peg$c467.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c468); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsedata16();
                if (s7 === peg$FAILED) {
                  s7 = peg$parselabelImmediate();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parseexpression();
                  }
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_mvi() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c473) {
      s1 = peg$c473;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c474); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c475) {
        s1 = peg$c475;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c476); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            if (peg$c467.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c468); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsedata8();
                if (s7 === peg$FAILED) {
                  s7 = peg$parselabelImmediate();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parseexpression();
                  }
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      var machineCode = [];
      var symbolTable = {};
      var ilc = 0;
      var mnemonics = {
          "nop"       : {code:0x00,size:1},
          "lxi b,d16" : {code:0x01,size:3},
          "stax b"    : {code:0x02,size:1},
          "inx b"     : {code:0x03,size:1},
          "inr b"     : {code:0x04,size:1},
          "dcr b"     : {code:0x05,size:1},
          "mvi b,d8"  : {code:0x06,size:2},
          "rlc"       : {code:0x07,size:1},
          "dad b"     : {code:0x09,size:1},
          "ldax b"    : {code:0x0A,size:1},
          "dcx b"     : {code:0x0B,size:1},
          "inr c"     : {code:0x0C,size:1},
          "dcr c"     : {code:0x0D,size:1},
          "mvi c,d8"  : {code:0x0E,size:2},
          "rrc"       : {code:0x0F,size:1},
          "lxi d,d16" : {code:0x11,size:3},
          "stax d"    : {code:0x12,size:1},
          "inx d"     : {code:0x13,size:1},
          "inr d"     : {code:0x14,size:1},
          "dcr d"     : {code:0x15,size:1},
          "mvi d,d8"  : {code:0x16,size:2},
          "ral"       : {code:0x17,size:1},
          "dad d"     : {code:0x19,size:1},
          "ldax d"    : {code:0x1A,size:1},
          "dcx d"     : {code:0x1B,size:1},
          "inr e"     : {code:0x1C,size:1},
          "dcr e"     : {code:0x1D,size:1},
          "mvi e,d8"  : {code:0x1E,size:2},
          "rar"       : {code:0x1F,size:1},
          "rim"       : {code:0x20,size:1},
          "lxi h,d16" : {code:0x21,size:3},
          "shld adr"  : {code:0x22,size:3},
          "inx h"     : {code:0x23,size:1},
          "inr h"     : {code:0x24,size:1},
          "dcr h"     : {code:0x25,size:1},
          "mvi h,d8"  : {code:0x26,size:2},
          "daa"       : {code:0x27,size:1},
          "dad h"     : {code:0x29,size:1},
          "lhld adr"  : {code:0x2A,size:3},
          "dcx h"     : {code:0x2B,size:1},
          "inr l"     : {code:0x2C,size:1},
          "dcr l"     : {code:0x2D,size:1},
          "mvi l,d8"  : {code:0x2E,size:2},
          "cma"       : {code:0x2F,size:1},
          "sim"       : {code:0x30,size:1},
          "lxi sp,d16": {code:0x31,size:3},
          "sta adr"   : {code:0x32,size:3},
          "inx sp"    : {code:0x33,size:1},
          "inr m"     : {code:0x34,size:1},
          "dcr m"     : {code:0x35,size:1},
          "mvi m,d8"  : {code:0x36,size:2},
          "stc"       : {code:0x37,size:1},
          "dad sp"    : {code:0x39,size:1},
          "lda adr"   : {code:0x3A,size:3},
          "dcx sp"    : {code:0x3B,size:1},
          "inr a"     : {code:0x3C,size:1},
          "dcr a"     : {code:0x3D,size:1},
          "mvi a,d8"  : {code:0x3E,size:2},
          "cmc"       : {code:0x3F,size:1},
          "mov b,b"   : {code:0x40,size:1},
          "mov b,c"   : {code:0x41,size:1},
          "mov b,d"   : {code:0x42,size:1},
          "mov b,e"   : {code:0x43,size:1},
          "mov b,h"   : {code:0x44,size:1},
          "mov b,l"   : {code:0x45,size:1},
          "mov b,m"   : {code:0x46,size:1},
          "mov b,a"   : {code:0x47,size:1},
          "mov c,b"   : {code:0x48,size:1},
          "mov c,c"   : {code:0x49,size:1},
          "mov c,d"   : {code:0x4A,size:1},
          "mov c,e"   : {code:0x4B,size:1},
          "mov c,h"   : {code:0x4C,size:1},
          "mov c,l"   : {code:0x4D,size:1},
          "mov c,m"   : {code:0x4E,size:1},
          "mov c,a"   : {code:0x4F,size:1},
          "mov d,b"   : {code:0x50,size:1},
          "mov d,c"   : {code:0x51,size:1},
          "mov d,d"   : {code:0x52,size:1},
          "mov d,e"   : {code:0x53,size:1},
          "mov d,h"   : {code:0x54,size:1},
          "mov d,l"   : {code:0x55,size:1},
          "mov d,m"   : {code:0x56,size:1},
          "mov d,a"   : {code:0x57,size:1},
          "mov e,b"   : {code:0x58,size:1},
          "mov e,c"   : {code:0x59,size:1},
          "mov e,d"   : {code:0x5A,size:1},
          "mov e,e"   : {code:0x5B,size:1},
          "mov e,h"   : {code:0x5C,size:1},
          "mov e,l"   : {code:0x5D,size:1},
          "mov e,m"   : {code:0x5E,size:1},
          "mov e,a"   : {code:0x5F,size:1},
          "mov h,b"   : {code:0x60,size:1},
          "mov h,c"   : {code:0x61,size:1},
          "mov h,d"   : {code:0x62,size:1},
          "mov h,e"   : {code:0x63,size:1},
          "mov h,h"   : {code:0x64,size:1},
          "mov h,l"   : {code:0x65,size:1},
          "mov h,m"   : {code:0x66,size:1},
          "mov h,a"   : {code:0x67,size:1},
          "mov l,b"   : {code:0x68,size:1},
          "mov l,c"   : {code:0x69,size:1},
          "mov l,d"   : {code:0x6A,size:1},
          "mov l,e"   : {code:0x6B,size:1},
          "mov l,h"   : {code:0x6C,size:1},
          "mov l,l"   : {code:0x6D,size:1},
          "mov l,m"   : {code:0x6E,size:1},
          "mov l,a"   : {code:0x6F,size:1},
          "mov m,b"   : {code:0x70,size:1},
          "mov m,c"   : {code:0x71,size:1},
          "mov m,d"   : {code:0x72,size:1},
          "mov m,e"   : {code:0x73,size:1},
          "mov m,h"   : {code:0x74,size:1},
          "mov m,l"   : {code:0x75,size:1},
          "hlt"       : {code:0x76,size:1},
          "mov m,a"   : {code:0x77,size:1},
          "mov a,b"   : {code:0x78,size:1},
          "mov a,c"   : {code:0x79,size:1},
          "mov a,d"   : {code:0x7A,size:1},
          "mov a,e"   : {code:0x7B,size:1},
          "mov a,h"   : {code:0x7C,size:1},
          "mov a,l"   : {code:0x7D,size:1},
          "mov a,m"   : {code:0x7E,size:1},
          "mov a,a"   : {code:0x7F,size:1},
          "add b"     : {code:0x80,size:1},
          "add c"     : {code:0x81,size:1},
          "add d"     : {code:0x82,size:1},
          "add e"     : {code:0x83,size:1},
          "add h"     : {code:0x84,size:1},
          "add l"     : {code:0x85,size:1},
          "add m"     : {code:0x86,size:1},
          "add a"     : {code:0x87,size:1},
          "adc b"     : {code:0x88,size:1},
          "adc c"     : {code:0x89,size:1},
          "adc d"     : {code:0x8A,size:1},
          "adc e"     : {code:0x8B,size:1},
          "adc h"     : {code:0x8C,size:1},
          "adc l"     : {code:0x8D,size:1},
          "adc m"     : {code:0x8E,size:1},
          "adc a"     : {code:0x8F,size:1},
          "sub b"     : {code:0x90,size:1},
          "sub c"     : {code:0x91,size:1},
          "sub d"     : {code:0x92,size:1},
          "sub e"     : {code:0x93,size:1},
          "sub h"     : {code:0x94,size:1},
          "sub l"     : {code:0x95,size:1},
          "sub m"     : {code:0x96,size:1},
          "sub a"     : {code:0x97,size:1},
          "sbb b"     : {code:0x98,size:1},
          "sbb c"     : {code:0x99,size:1},
          "sbb d"     : {code:0x9A,size:1},
          "sbb e"     : {code:0x9B,size:1},
          "sbb h"     : {code:0x9C,size:1},
          "sbb l"     : {code:0x9D,size:1},
          "sbb m"     : {code:0x9E,size:1},
          "sbb a"     : {code:0x9F,size:1},
          "ana b"     : {code:0xA0,size:1},
          "ana c"     : {code:0xA1,size:1},
          "ana d"     : {code:0xA2,size:1},
          "ana e"     : {code:0xA3,size:1},
          "ana h"     : {code:0xA4,size:1},
          "ana l"     : {code:0xA5,size:1},
          "ana m"     : {code:0xA6,size:1},
          "ana a"     : {code:0xA7,size:1},
          "xra b"     : {code:0xA8,size:1},
          "xra c"     : {code:0xA9,size:1},
          "xra d"     : {code:0xAA,size:1},
          "xra e"     : {code:0xAB,size:1},
          "xra h"     : {code:0xAC,size:1},
          "xra l"     : {code:0xAD,size:1},
          "xra m"     : {code:0xAE,size:1},
          "xra a"     : {code:0xAF,size:1},
          "ora b"     : {code:0xB0,size:1},
          "ora c"     : {code:0xB1,size:1},
          "ora d"     : {code:0xB2,size:1},
          "ora e"     : {code:0xB3,size:1},
          "ora h"     : {code:0xB4,size:1},
          "ora l"     : {code:0xB5,size:1},
          "ora m"     : {code:0xB6,size:1},
          "ora a"     : {code:0xB7,size:1},
          "cmp b"     : {code:0xB8,size:1},
          "cmp c"     : {code:0xB9,size:1},
          "cmp d"     : {code:0xBA,size:1},
          "cmp e"     : {code:0xBB,size:1},
          "cmp h"     : {code:0xBC,size:1},
          "cmp l"     : {code:0xBD,size:1},
          "cmp m"     : {code:0xBE,size:1},
          "cmp a"     : {code:0xBF,size:1},
          "rnz"       : {code:0xC0,size:1},
          "pop b"     : {code:0xC1,size:1},
          "jnz adr"   : {code:0xC2,size:3},
          "jmp adr"   : {code:0xC3,size:3},
          "cnz adr"   : {code:0xC4,size:3},
          "push b"    : {code:0xC5,size:1},
          "adi d8"    : {code:0xC6,size:2},
          "rst 0"     : {code:0xC7,size:1},
          "rz"        : {code:0xC8,size:1},
          "ret"       : {code:0xC9,size:1},
          "jz adr"    : {code:0xCA,size:3},
          "cz adr"    : {code:0xCC,size:3},
          "call adr"  : {code:0xCD,size:3},
          "aci d8"    : {code:0xCE,size:2},
          "rst 1"     : {code:0xCF,size:1},
          "rnc"       : {code:0xD0,size:1},
          "pop d"     : {code:0xD1,size:1},
          "jnc adr"   : {code:0xD2,size:3},
          "out d8"    : {code:0xD3,size:2},
          "cnc adr"   : {code:0xD4,size:3},
          "push d"    : {code:0xD5,size:1},
          "sui d8"    : {code:0xD6,size:2},
          "rst 2"     : {code:0xD7,size:1},
          "rc"        : {code:0xD8,size:1},
          "jc adr"    : {code:0xDA,size:3},
          "in d8"     : {code:0xDB,size:2},
          "cc adr"    : {code:0xDC,size:3},
          "sbi d8"    : {code:0xDE,size:2},
          "rst 3"     : {code:0xDF,size:1},
          "rpo"       : {code:0xE0,size:1},
          "pop h"     : {code:0xE1,size:1},
          "jpo adr"   : {code:0xE2,size:3},
          "xthl"      : {code:0xE3,size:1},
          "cpo adr"   : {code:0xE4,size:3},
          "push h"    : {code:0xE5,size:1},
          "ani d8"    : {code:0xE6,size:2},
          "rst 4"     : {code:0xE7,size:1},
          "rpe"       : {code:0xE8,size:1},
          "pchl"      : {code:0xE9,size:1},
          "jpe adr"   : {code:0xEA,size:3},
          "xchg"      : {code:0xEB,size:1},
          "cpe adr"   : {code:0xEC,size:3},
          "xri d8"    : {code:0xEE,size:2},
          "rst 5"     : {code:0xEF,size:1},
          "rp"        : {code:0xF0,size:1},
          "pop psw"   : {code:0xF1,size:1},
          "jp adr"    : {code:0xF2,size:3},
          "di"        : {code:0xF3,size:1},
          "cp adr"    : {code:0xF4,size:3},
          "push psw"  : {code:0xF5,size:1},
          "push a"    : {code:0xF5,size:1},
          "ori d8"    : {code:0xF6,size:2},
          "rst 6"     : {code:0xF7,size:1},
          "rm"        : {code:0xF8,size:1},
          "sphl"      : {code:0xF9,size:1},
          "jm adr"    : {code:0xFA,size:3},
          "ei"        : {code:0xFB,size:1},
          "cm adr"    : {code:0xFC,size:3},
          "cpi d8"    : {code:0xFE,size:2},
          "rst 7"     : {code:0xFF,size:1}
      };

      var directives = function (value) {
          return {
              "db": {}
          };
      };

      var twosComplement = function (d8) {
          return (0xFF + d8 + 1);
      };


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
