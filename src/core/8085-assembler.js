/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { machineCode: peg$parsemachineCode },
      peg$startRuleFunction  = peg$parsemachineCode,

      peg$c0 = function(prg) {
          var i = 0,
              line,
              lines = prg.length,
              data,
              dataVal,
              objCode = [];

          for (i = 0; i < lines; i += 1) {
              line = prg[i];

              if (line == null) continue;

              if (!line.opcode) continue;

              if (line.size === 1) {
                  objCode.push({ data: line.opcode, kind: 'code', location: line.location });
              } else if (line.size === 2) {
                  data = line.data.value;
                  dataVal = (typeof line.data.value === "string") ? symbolTable[line.data.value] : line.data.value;
                  if (dataVal < 0) {
                      dataVal = twosComplement(dataVal);
                  }
                  objCode.push({ data: line.opcode, kind: 'code', location: line.location });
                  objCode.push({ data: dataVal, kind: 'data', location: line.data.location });
              } else {
                  data = line.data.value;
                  dataVal = (typeof line.data.value === "string") ? symbolTable[line.data.value] : line.data.value;
                  objCode.push({ data: line.opcode, kind: 'code', location: line.location });
                  objCode.push({ data: dataVal & 0xFF, kind: 'data', location: line.data.location });
                  objCode.push({ data: dataVal >> 8, kind: 'data', location: line.data.location });
              }
          }

          return objCode;
      },
      peg$c1 = function(first, l) {return l},
      peg$c2 = function(first, rest) {return [first].concat(rest);},
      peg$c3 = function(label, op, comment) {
          if (label && label !== "") {
              symbolTable[label.value] = ilc;
          }

          if (op !== null) {
            ilc += op.size;
            return op;
          }

      },
      peg$c4 = ":",
      peg$c5 = peg$literalExpectation(":", false),
      peg$c6 = function(label) {return label;},
      peg$c7 = peg$otherExpectation("label"),
      peg$c8 = /^[a-zA-Z?@]/,
      peg$c9 = peg$classExpectation([["a", "z"], ["A", "Z"], "?", "@"], false, false),
      peg$c10 = /^[a-zA-Z0-9]/,
      peg$c11 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false),
      peg$c12 = function(first, rest) {
      	return { value: first + rest.join(""), location: location() };
      },
      peg$c13 = ",",
      peg$c14 = peg$literalExpectation(",", false),
      peg$c15 = function(first, v) { return v; },
      peg$c16 = function(first, rest) {
          return [first].concat(rest);
      },
      peg$c17 = peg$otherExpectation("Register Name"),
      peg$c18 = /^[AaBbCcDdEeHhLlMm]/,
      peg$c19 = peg$classExpectation(["A", "a", "B", "b", "C", "c", "D", "d", "E", "e", "H", "h", "L", "l", "M", "m"], false, false),
      peg$c20 = function(l) { return l.toLowerCase(); },
      peg$c21 = /^[BbDdHh]/,
      peg$c22 = peg$classExpectation(["B", "b", "D", "d", "H", "h"], false, false),
      peg$c23 = /^[Bb]/,
      peg$c24 = peg$classExpectation(["B", "b"], false, false),
      peg$c25 = /^[Dd]/,
      peg$c26 = peg$classExpectation(["D", "d"], false, false),
      peg$c27 = /^[Hh]/,
      peg$c28 = peg$classExpectation(["H", "h"], false, false),
      peg$c29 = "PSW",
      peg$c30 = peg$literalExpectation("PSW", false),
      peg$c31 = "psw",
      peg$c32 = peg$literalExpectation("psw", false),
      peg$c33 = "SP",
      peg$c34 = peg$literalExpectation("SP", false),
      peg$c35 = "sp",
      peg$c36 = peg$literalExpectation("sp", false),
      peg$c37 = peg$otherExpectation("byte"),
      peg$c38 = function(n) {
          if (n > 0xFF) {
              var e = new Error();
              e.message = "8-bit data expected.";
              if (typeof line !== "undefined" && typeof column !== "undefined") {
                  e.line = line; e.column = column;
              }
              throw e;
          } else {
              return { value: n, location: location() };
          }
      },
      peg$c39 = peg$otherExpectation("word"),
      peg$c40 = function(n) {
          if (n > 0xFFFF) {
              var e = new Error();
              e.message = "16-bit data expected.";
              if (typeof line !== "undefined" && typeof column !== "undefined") {
                  e.line = line; e.column = column;
              }
              throw e;
          } else {
              return { value: n, location: location() };
          }
      },
      peg$c41 = peg$otherExpectation("numeric literal"),
      peg$c42 = peg$otherExpectation("decimal literal"),
      peg$c43 = /^[\-]/,
      peg$c44 = peg$classExpectation(["-"], false, false),
      peg$c45 = function(neg, digits) {
          return parseInt((!neg ? "":"-") + digits.join(""), 10);
      },
      peg$c46 = peg$otherExpectation("hex literal"),
      peg$c47 = "0x",
      peg$c48 = peg$literalExpectation("0x", false),
      peg$c49 = function(hexits) {
          return parseInt(hexits.join(""), 16);
      },
      peg$c50 = "H",
      peg$c51 = peg$literalExpectation("H", false),
      peg$c52 = "h",
      peg$c53 = peg$literalExpectation("h", false),
      peg$c54 = peg$otherExpectation("binary literal"),
      peg$c55 = "0b",
      peg$c56 = peg$literalExpectation("0b", false),
      peg$c57 = function(bits) { return parseInt(bits.join(""), 2); },
      peg$c58 = peg$otherExpectation("identifier"),
      peg$c59 = function(ltrs) { return ltrs.join(""); },
      peg$c60 = peg$otherExpectation("letter/underscore"),
      peg$c61 = /^[a-zA-Z_]/,
      peg$c62 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
      peg$c63 = peg$otherExpectation("digit"),
      peg$c64 = /^[0-9]/,
      peg$c65 = peg$classExpectation([["0", "9"]], false, false),
      peg$c66 = peg$otherExpectation("hex digit"),
      peg$c67 = /^[0-9a-fA-F]/,
      peg$c68 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
      peg$c69 = peg$otherExpectation("bit"),
      peg$c70 = /^[01]/,
      peg$c71 = peg$classExpectation(["0", "1"], false, false),
      peg$c72 = peg$otherExpectation("expression"),
      peg$c73 = peg$otherExpectation("Arithmetic Expression"),
      peg$c74 = peg$otherExpectation("Addition"),
      peg$c75 = "+",
      peg$c76 = peg$literalExpectation("+", false),
      peg$c77 = function(left, right) {
          return { value: left + right, location: location() };
        },
      peg$c78 = peg$otherExpectation("Subtraction"),
      peg$c79 = "-",
      peg$c80 = peg$literalExpectation("-", false),
      peg$c81 = function(left, right) {
          return { value: left - right, location: location() };
        },
      peg$c82 = peg$otherExpectation("Multiplication"),
      peg$c83 = "*",
      peg$c84 = peg$literalExpectation("*", false),
      peg$c85 = function(left, right) {
          return { value: left * right, location: location() };
        },
      peg$c86 = peg$otherExpectation("Division"),
      peg$c87 = "/",
      peg$c88 = peg$literalExpectation("/", false),
      peg$c89 = function(left, right) {
          return { value: left / right, location: location() };
        },
      peg$c90 = peg$otherExpectation("Modulo"),
      peg$c91 = "mod",
      peg$c92 = peg$literalExpectation("MOD", true),
      peg$c93 = function(left, right) {
          return { value: left % right, location: location() };
        },
      peg$c94 = "(",
      peg$c95 = peg$literalExpectation("(", false),
      peg$c96 = ")",
      peg$c97 = peg$literalExpectation(")", false),
      peg$c98 = function(addition) { return addition; },
      peg$c99 = peg$otherExpectation("Shift Expression"),
      peg$c100 = peg$otherExpectation("Shift Right"),
      peg$c101 = "shr",
      peg$c102 = peg$literalExpectation("SHR", true),
      peg$c103 = function(left, right) {
          return { value: left >> right, location: location() };
        },
      peg$c104 = peg$otherExpectation("Shift Left"),
      peg$c105 = "shl",
      peg$c106 = peg$literalExpectation("SHL", true),
      peg$c107 = function(left, right) {
          return { value: left << right, location: location() };
        },
      peg$c108 = function(shr) { return shr; },
      peg$c109 = peg$otherExpectation("comment"),
      peg$c110 = ";",
      peg$c111 = peg$literalExpectation(";", false),
      peg$c112 = /^[^\n\r\n\u2028\u2029]/,
      peg$c113 = peg$classExpectation(["\n", "\r", "\n", "\u2028", "\u2029"], true, false),
      peg$c114 = function(c) {return c.join("");},
      peg$c115 = peg$otherExpectation("line end"),
      peg$c116 = "\n",
      peg$c117 = peg$literalExpectation("\n", false),
      peg$c118 = "\r\n",
      peg$c119 = peg$literalExpectation("\r\n", false),
      peg$c120 = "\r",
      peg$c121 = peg$literalExpectation("\r", false),
      peg$c122 = "\u2028",
      peg$c123 = peg$literalExpectation("\u2028", false),
      peg$c124 = "\u2029",
      peg$c125 = peg$literalExpectation("\u2029", false),
      peg$c126 = peg$otherExpectation("whitespace"),
      peg$c127 = /^[ \t\x0B\f\xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/,
      peg$c128 = peg$classExpectation([" ", "\t", "\x0B", "\f", "\xA0", "\uFEFF", "\u1680", "\u180E", ["\u2000", "\u200A"], "\u202F", "\u205F", "\u3000"], false, false),
      peg$c129 = function(inst) {

          var paramTypes = inst.paramTypes,
              data,
              paramTypesStr = paramTypes.join(","),
              opcode = mnemonics[inst.name.toLowerCase() + (paramTypesStr === "" ? "" : " ") + paramTypesStr];

          if (typeof paramTypes[0] !== "undefined" &&
              (paramTypes[0] === "adr" || paramTypes[0] === "d16" || paramTypes[0] === "d8")) {
              data = inst.params[0];
          }
          else if (typeof paramTypes[1] !== "undefined" &&
              (paramTypes[1] === "adr" || paramTypes[1] === "d16" || paramTypes[1] === "d8")) {
              data = inst.params[1];
          }
          return {
              opcode: opcode.code,
              data: data,
              size: opcode.size,
              location: location()
          };
      },
      peg$c130 = function(op) {
          return {
              name: op,
              paramTypes:[],
              params: []
          };
      },
      peg$c131 = function(op) {
          var name, params, paramTypes;

          if (typeof op === "string") {
              name = op;
              params = [];
              paramTypes = [];
          } else {
              name = op[0];
              paramTypes = [op[2]];
              params = [op[2]];
          }
          return {
              name: name,
              paramTypes: paramTypes,
              params: params
          };
      },
      peg$c132 = function(op) {
          return {
              name: op,
              paramTypes: [],
              params: []
          }
      },
      peg$c133 = function(op) {
          var name = op[0].toLowerCase(),
              params,
              paramTypes;

          if (name === "mov") {
              params = [op[2],op[6]];
              paramTypes = params;
          } else {
              params = [op[2]];
              paramTypes = params;
          }

          return {
              name: name,
              params: params,
              paramTypes: paramTypes
          }
      },
      peg$c134 = function(op) {
          return {
              name: op[0],
              paramTypes: [op[2]],
              params: [op[2]]
          }
      },
      peg$c135 = function(op) {
          var name, params, paramTypes;

          if (typeof op === "string") {
              name = op;
              params = [];
              paramTypes = [];
          } else {
              name = op[0];
              params = [op[2]];
              paramTypes = [op[2]];
          }

          return {
              name: name,
              params: params,
              paramTypes: paramTypes
          };
      },
      peg$c136 = function(op) {
          var name = op[0].toLowerCase(), params, paramTypes;

          if (name === "lxi") {
              params = [op[2],op[6]];
              paramTypes = [op[2],"d16"];
          } else if (name === "mvi") {
              params = [op[2],op[6]];
              paramTypes = [op[2],"d8"];
          } else {
              params = [op[2]];
              paramTypes = ["d8"];
          }

          return {
              name: name,
              params: params,
              paramTypes: paramTypes
          };
      },
      peg$c137 = function(op) {
          return {
              name: op[0],
              params: [op[2]],
              paramTypes: ["adr"]
          }
      },
      peg$c138 = function(op) {
          var name,
              params,
              paramTypes;

          if (typeof op === "string") {
              name = op;
              params = [];
              paramTypes = [];
          } else {
              name = op[0];
              params = [op[2]];
              paramTypes = ["adr"];
          }

          return {
              name: name,
              params: params,
              paramTypes: paramTypes
          };
      },
      peg$c139 = function(op) {
          return {
              name: op[0],
              params: [op[2]],
              paramTypes: ["adr"]
          };
      },
      peg$c140 = function(op) {
          return {
              name: op,
              params: [],
              paramTypes: []
          };
      },
      peg$c141 = "STC",
      peg$c142 = peg$literalExpectation("STC", false),
      peg$c143 = "stc",
      peg$c144 = peg$literalExpectation("stc", false),
      peg$c145 = "CMC",
      peg$c146 = peg$literalExpectation("CMC", false),
      peg$c147 = "cmc",
      peg$c148 = peg$literalExpectation("cmc", false),
      peg$c149 = "CMA",
      peg$c150 = peg$literalExpectation("CMA", false),
      peg$c151 = "cma",
      peg$c152 = peg$literalExpectation("cma", false),
      peg$c153 = "DAA",
      peg$c154 = peg$literalExpectation("DAA", false),
      peg$c155 = "daa",
      peg$c156 = peg$literalExpectation("daa", false),
      peg$c157 = "SPHL",
      peg$c158 = peg$literalExpectation("SPHL", false),
      peg$c159 = "sphl",
      peg$c160 = peg$literalExpectation("sphl", false),
      peg$c161 = "PCHL",
      peg$c162 = peg$literalExpectation("PCHL", false),
      peg$c163 = "pchl",
      peg$c164 = peg$literalExpectation("pchl", false),
      peg$c165 = "HLT",
      peg$c166 = peg$literalExpectation("HLT", false),
      peg$c167 = "hlt",
      peg$c168 = peg$literalExpectation("hlt", false),
      peg$c169 = "RLC",
      peg$c170 = peg$literalExpectation("RLC", false),
      peg$c171 = "rlc",
      peg$c172 = peg$literalExpectation("rlc", false),
      peg$c173 = "RRC",
      peg$c174 = peg$literalExpectation("RRC", false),
      peg$c175 = "rrc",
      peg$c176 = peg$literalExpectation("rrc", false),
      peg$c177 = "RAR",
      peg$c178 = peg$literalExpectation("RAR", false),
      peg$c179 = "rar",
      peg$c180 = peg$literalExpectation("rar", false),
      peg$c181 = "RAL",
      peg$c182 = peg$literalExpectation("RAL", false),
      peg$c183 = "ral",
      peg$c184 = peg$literalExpectation("ral", false),
      peg$c185 = "RET",
      peg$c186 = peg$literalExpectation("RET", false),
      peg$c187 = "ret",
      peg$c188 = peg$literalExpectation("ret", false),
      peg$c189 = "RC",
      peg$c190 = peg$literalExpectation("RC", false),
      peg$c191 = "rc",
      peg$c192 = peg$literalExpectation("rc", false),
      peg$c193 = "RNC",
      peg$c194 = peg$literalExpectation("RNC", false),
      peg$c195 = "rnc",
      peg$c196 = peg$literalExpectation("rnc", false),
      peg$c197 = "RZ",
      peg$c198 = peg$literalExpectation("RZ", false),
      peg$c199 = "rz",
      peg$c200 = peg$literalExpectation("rz", false),
      peg$c201 = "RNZ",
      peg$c202 = peg$literalExpectation("RNZ", false),
      peg$c203 = "rnz",
      peg$c204 = peg$literalExpectation("rnz", false),
      peg$c205 = "RP",
      peg$c206 = peg$literalExpectation("RP", false),
      peg$c207 = "rp",
      peg$c208 = peg$literalExpectation("rp", false),
      peg$c209 = "RM",
      peg$c210 = peg$literalExpectation("RM", false),
      peg$c211 = "rm",
      peg$c212 = peg$literalExpectation("rm", false),
      peg$c213 = "RPE",
      peg$c214 = peg$literalExpectation("RPE", false),
      peg$c215 = "rpe",
      peg$c216 = peg$literalExpectation("rpe", false),
      peg$c217 = "RPO",
      peg$c218 = peg$literalExpectation("RPO", false),
      peg$c219 = "rpo",
      peg$c220 = peg$literalExpectation("rpo", false),
      peg$c221 = "XCHG",
      peg$c222 = peg$literalExpectation("XCHG", false),
      peg$c223 = "xchg",
      peg$c224 = peg$literalExpectation("xchg", false),
      peg$c225 = "XTHL",
      peg$c226 = peg$literalExpectation("XTHL", false),
      peg$c227 = "xthl",
      peg$c228 = peg$literalExpectation("xthl", false),
      peg$c229 = "EI",
      peg$c230 = peg$literalExpectation("EI", false),
      peg$c231 = "ei",
      peg$c232 = peg$literalExpectation("ei", false),
      peg$c233 = "DI",
      peg$c234 = peg$literalExpectation("DI", false),
      peg$c235 = "di",
      peg$c236 = peg$literalExpectation("di", false),
      peg$c237 = "NOP",
      peg$c238 = peg$literalExpectation("NOP", false),
      peg$c239 = "nop",
      peg$c240 = peg$literalExpectation("nop", false),
      peg$c241 = "INR",
      peg$c242 = peg$literalExpectation("INR", false),
      peg$c243 = "inr",
      peg$c244 = peg$literalExpectation("inr", false),
      peg$c245 = "DCR",
      peg$c246 = peg$literalExpectation("DCR", false),
      peg$c247 = "dcr",
      peg$c248 = peg$literalExpectation("dcr", false),
      peg$c249 = "STAX",
      peg$c250 = peg$literalExpectation("STAX", false),
      peg$c251 = "stax",
      peg$c252 = peg$literalExpectation("stax", false),
      peg$c253 = "LDAX",
      peg$c254 = peg$literalExpectation("LDAX", false),
      peg$c255 = "ldax",
      peg$c256 = peg$literalExpectation("ldax", false),
      peg$c257 = "ADD",
      peg$c258 = peg$literalExpectation("ADD", false),
      peg$c259 = "add",
      peg$c260 = peg$literalExpectation("add", false),
      peg$c261 = "ADC",
      peg$c262 = peg$literalExpectation("ADC", false),
      peg$c263 = "adc",
      peg$c264 = peg$literalExpectation("adc", false),
      peg$c265 = "SUB",
      peg$c266 = peg$literalExpectation("SUB", false),
      peg$c267 = "sub",
      peg$c268 = peg$literalExpectation("sub", false),
      peg$c269 = "SBB",
      peg$c270 = peg$literalExpectation("SBB", false),
      peg$c271 = "sbb",
      peg$c272 = peg$literalExpectation("sbb", false),
      peg$c273 = "ANA",
      peg$c274 = peg$literalExpectation("ANA", false),
      peg$c275 = "ana",
      peg$c276 = peg$literalExpectation("ana", false),
      peg$c277 = "XRA",
      peg$c278 = peg$literalExpectation("XRA", false),
      peg$c279 = "xra",
      peg$c280 = peg$literalExpectation("xra", false),
      peg$c281 = "ORA",
      peg$c282 = peg$literalExpectation("ORA", false),
      peg$c283 = "ora",
      peg$c284 = peg$literalExpectation("ora", false),
      peg$c285 = "CMP",
      peg$c286 = peg$literalExpectation("CMP", false),
      peg$c287 = "cmp",
      peg$c288 = peg$literalExpectation("cmp", false),
      peg$c289 = "PUSH",
      peg$c290 = peg$literalExpectation("PUSH", false),
      peg$c291 = "push",
      peg$c292 = peg$literalExpectation("push", false),
      peg$c293 = "POP",
      peg$c294 = peg$literalExpectation("POP", false),
      peg$c295 = "pop",
      peg$c296 = peg$literalExpectation("pop", false),
      peg$c297 = "DAD",
      peg$c298 = peg$literalExpectation("DAD", false),
      peg$c299 = "dad",
      peg$c300 = peg$literalExpectation("dad", false),
      peg$c301 = "INX",
      peg$c302 = peg$literalExpectation("INX", false),
      peg$c303 = "inx",
      peg$c304 = peg$literalExpectation("inx", false),
      peg$c305 = "DCX",
      peg$c306 = peg$literalExpectation("DCX", false),
      peg$c307 = "dcx",
      peg$c308 = peg$literalExpectation("dcx", false),
      peg$c309 = "ADI",
      peg$c310 = peg$literalExpectation("ADI", false),
      peg$c311 = "adi",
      peg$c312 = peg$literalExpectation("adi", false),
      peg$c313 = "ACI",
      peg$c314 = peg$literalExpectation("ACI", false),
      peg$c315 = "aci",
      peg$c316 = peg$literalExpectation("aci", false),
      peg$c317 = "SUI",
      peg$c318 = peg$literalExpectation("SUI", false),
      peg$c319 = "sui",
      peg$c320 = peg$literalExpectation("sui", false),
      peg$c321 = "SBI",
      peg$c322 = peg$literalExpectation("SBI", false),
      peg$c323 = "sbi",
      peg$c324 = peg$literalExpectation("sbi", false),
      peg$c325 = "ANI",
      peg$c326 = peg$literalExpectation("ANI", false),
      peg$c327 = "ani",
      peg$c328 = peg$literalExpectation("ani", false),
      peg$c329 = "XRI",
      peg$c330 = peg$literalExpectation("XRI", false),
      peg$c331 = "xri",
      peg$c332 = peg$literalExpectation("xri", false),
      peg$c333 = "ORI",
      peg$c334 = peg$literalExpectation("ORI", false),
      peg$c335 = "ori",
      peg$c336 = peg$literalExpectation("ori", false),
      peg$c337 = "CPI",
      peg$c338 = peg$literalExpectation("CPI", false),
      peg$c339 = "cpi",
      peg$c340 = peg$literalExpectation("cpi", false),
      peg$c341 = "STA",
      peg$c342 = peg$literalExpectation("STA", false),
      peg$c343 = "sta",
      peg$c344 = peg$literalExpectation("sta", false),
      peg$c345 = "LDA",
      peg$c346 = peg$literalExpectation("LDA", false),
      peg$c347 = "lda",
      peg$c348 = peg$literalExpectation("lda", false),
      peg$c349 = "SHLD",
      peg$c350 = peg$literalExpectation("SHLD", false),
      peg$c351 = "shld",
      peg$c352 = peg$literalExpectation("shld", false),
      peg$c353 = "LHLD",
      peg$c354 = peg$literalExpectation("LHLD", false),
      peg$c355 = "lhld",
      peg$c356 = peg$literalExpectation("lhld", false),
      peg$c357 = "JMP",
      peg$c358 = peg$literalExpectation("JMP", false),
      peg$c359 = "jmp",
      peg$c360 = peg$literalExpectation("jmp", false),
      peg$c361 = "JC",
      peg$c362 = peg$literalExpectation("JC", false),
      peg$c363 = "jc",
      peg$c364 = peg$literalExpectation("jc", false),
      peg$c365 = "JNC",
      peg$c366 = peg$literalExpectation("JNC", false),
      peg$c367 = "jnc",
      peg$c368 = peg$literalExpectation("jnc", false),
      peg$c369 = "JZ",
      peg$c370 = peg$literalExpectation("JZ", false),
      peg$c371 = "jz",
      peg$c372 = peg$literalExpectation("jz", false),
      peg$c373 = "JNZ",
      peg$c374 = peg$literalExpectation("JNZ", false),
      peg$c375 = "jnz",
      peg$c376 = peg$literalExpectation("jnz", false),
      peg$c377 = "JM",
      peg$c378 = peg$literalExpectation("JM", false),
      peg$c379 = "jm",
      peg$c380 = peg$literalExpectation("jm", false),
      peg$c381 = "JP",
      peg$c382 = peg$literalExpectation("JP", false),
      peg$c383 = "jp",
      peg$c384 = peg$literalExpectation("jp", false),
      peg$c385 = "JPE",
      peg$c386 = peg$literalExpectation("JPE", false),
      peg$c387 = "jpe",
      peg$c388 = peg$literalExpectation("jpe", false),
      peg$c389 = "JPO",
      peg$c390 = peg$literalExpectation("JPO", false),
      peg$c391 = "jpo",
      peg$c392 = peg$literalExpectation("jpo", false),
      peg$c393 = "CALL",
      peg$c394 = peg$literalExpectation("CALL", false),
      peg$c395 = "call",
      peg$c396 = peg$literalExpectation("call", false),
      peg$c397 = "CC",
      peg$c398 = peg$literalExpectation("CC", false),
      peg$c399 = "cc",
      peg$c400 = peg$literalExpectation("cc", false),
      peg$c401 = "CNC",
      peg$c402 = peg$literalExpectation("CNC", false),
      peg$c403 = "cnc",
      peg$c404 = peg$literalExpectation("cnc", false),
      peg$c405 = "CZ",
      peg$c406 = peg$literalExpectation("CZ", false),
      peg$c407 = "cz",
      peg$c408 = peg$literalExpectation("cz", false),
      peg$c409 = "CNZ",
      peg$c410 = peg$literalExpectation("CNZ", false),
      peg$c411 = "cnz",
      peg$c412 = peg$literalExpectation("cnz", false),
      peg$c413 = "CM",
      peg$c414 = peg$literalExpectation("CM", false),
      peg$c415 = "cm",
      peg$c416 = peg$literalExpectation("cm", false),
      peg$c417 = "CP",
      peg$c418 = peg$literalExpectation("CP", false),
      peg$c419 = "cp",
      peg$c420 = peg$literalExpectation("cp", false),
      peg$c421 = "CPE",
      peg$c422 = peg$literalExpectation("CPE", false),
      peg$c423 = "cpe",
      peg$c424 = peg$literalExpectation("cpe", false),
      peg$c425 = "CPO",
      peg$c426 = peg$literalExpectation("CPO", false),
      peg$c427 = "cpo",
      peg$c428 = peg$literalExpectation("cpo", false),
      peg$c429 = "MOV",
      peg$c430 = peg$literalExpectation("MOV", false),
      peg$c431 = "mov",
      peg$c432 = peg$literalExpectation("mov", false),
      peg$c433 = /^[,]/,
      peg$c434 = peg$classExpectation([","], false, false),
      peg$c435 = "LXI",
      peg$c436 = peg$literalExpectation("LXI", false),
      peg$c437 = "lxi",
      peg$c438 = peg$literalExpectation("lxi", false),
      peg$c439 = "MVI",
      peg$c440 = peg$literalExpectation("MVI", false),
      peg$c441 = "mvi",
      peg$c442 = peg$literalExpectation("mvi", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsemachineCode() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseprogram();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseprogram() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseline();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseeol();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseline();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c1(s2, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseeol();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseline();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c1(s2, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseline() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhitespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselabelPart();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoperation();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecomment();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c3(s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselabelPart() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parselabel();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c4;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsewhitespace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsewhitespace();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselabel() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c8.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c10.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c10.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c11); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }

    return s0;
  }

  function peg$parseparamList() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhitespace();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhitespace();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevalue();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parsewhitespace();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parsewhitespace();
        }
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c13;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parsewhitespace();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parsewhitespace();
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsevalue();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c15(s2, s8);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parsewhitespace();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsewhitespace();
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c13;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parsewhitespace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsewhitespace();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsevalue();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$c15(s2, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c16(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevalue() {
    var s0;

    s0 = peg$parseregister();
    if (s0 === peg$FAILED) {
      s0 = peg$parselabel();
    }

    return s0;
  }

  function peg$parseregister() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c18.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    return s0;
  }

  function peg$parseregisterPair() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c21.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseregisterPairB() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c23.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseregisterPairD() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c25.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseregisterPairH() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c27.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseregisterPairPSW() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c30); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c31) {
        s1 = peg$c31;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestackPointer() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c35) {
        s1 = peg$c35;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseidentLetter();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedata8() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenumLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c38(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }

    return s0;
  }

  function peg$parsedata16() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenumLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c40(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }

    return s0;
  }

  function peg$parsenumLiteral() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsebinLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parsehexLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedecLiteral();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }

    return s0;
  }

  function peg$parsedecLiteral() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c43.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsedigit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsedigit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c45(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }

    return s0;
  }

  function peg$parsehexLiteral() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsehexForm1();
    if (s0 === peg$FAILED) {
      s0 = peg$parsehexForm2();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }

    return s0;
  }

  function peg$parsehexForm1() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsehexit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsehexit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c49(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehexForm2() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsehexit();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsehexit();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 72) {
        s2 = peg$c50;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 104) {
          s2 = peg$c52;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c49(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebinLiteral() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsebit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsebit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c57(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }

    return s0;
  }

  function peg$parseidentifier() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseidentLetter();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseidentLetter();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c59(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c58); }
    }

    return s0;
  }

  function peg$parseidentLetter() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c61.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }

    return s0;
  }

  function peg$parsedigit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c64.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }

    return s0;
  }

  function peg$parsehexit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c67.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }

    return s0;
  }

  function peg$parsebit() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c70.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c71); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }

    return s0;
  }

  function peg$parseexpression() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsearithmetic();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }

    return s0;
  }

  function peg$parsearithmetic() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseaddition();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c73); }
    }

    return s0;
  }

  function peg$parseaddition() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsesubtraction();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s3 = peg$c75;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseaddition();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c77(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesubtraction();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }

    return s0;
  }

  function peg$parsesubtraction() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsemultiplication();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c79;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesubtraction();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c81(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsemultiplication();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }

    return s0;
  }

  function peg$parsemultiplication() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedivision();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemultiplication();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c85(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsedivision();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }

    return s0;
  }

  function peg$parsedivision() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsemodulo();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s3 = peg$c87;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedivision();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c89(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsemodulo();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c86); }
    }

    return s0;
  }

  function peg$parsemodulo() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenumLiteral();
    if (s1 === peg$FAILED) {
      s1 = peg$parselabel();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c91) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemodulo();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c93(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parselabel();
        if (s0 === peg$FAILED) {
          s0 = peg$parseshift();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
              s1 = peg$c94;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c95); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseaddition();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s3 = peg$c96;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c97); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c98(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }

    return s0;
  }

  function peg$parseshift() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseshiftRight();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c99); }
    }

    return s0;
  }

  function peg$parseshiftRight() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseshiftLeft();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c101) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c102); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseshiftRight();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c103(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseshiftLeft();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }

    return s0;
  }

  function peg$parseshiftLeft() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenumLiteral();
    if (s1 === peg$FAILED) {
      s1 = peg$parselabel();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c105) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseshiftLeft();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c107(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parselabel();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c94;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseshift();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s3 = peg$c96;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c97); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c108(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c104); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c110;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c111); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c112.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c113); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c112.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c113); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c114(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    s0 = [];
    s1 = peg$parsewhitespace();
    if (s1 === peg$FAILED) {
      s1 = peg$parseeol();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseeol();
      }
    }

    return s0;
  }

  function peg$parseeol() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c116;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c117); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c118) {
        s0 = peg$c118;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c119); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c120;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8232) {
            s0 = peg$c122;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c123); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8233) {
              s0 = peg$c124;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c125); }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c115); }
    }

    return s0;
  }

  function peg$parsewhitespace() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c127.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c128); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c126); }
    }

    return s0;
  }

  function peg$parseoperation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecarryBitInstructions();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesingleRegInstructions();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenopInstruction();
        if (s1 === peg$FAILED) {
          s1 = peg$parsedataTransferInstructions();
          if (s1 === peg$FAILED) {
            s1 = peg$parseregOrMemToAccInstructions();
            if (s1 === peg$FAILED) {
              s1 = peg$parserotateAccInstructions();
              if (s1 === peg$FAILED) {
                s1 = peg$parseregPairInstructions();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseimmediateInstructions();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsedirectAddressingInstructions();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsejumpInstructions();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parsecallInstructions();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsereturnInstructions();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsehaltInstruction();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhitespace();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c129(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecarryBitInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_stc();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_cmc();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c130(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesingleRegInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_inr();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_dcr();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_cma();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_daa();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c131(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenopInstruction() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_nop();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c132(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedataTransferInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_mov();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_stax();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_ldax();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c133(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseregOrMemToAccInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_add();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_adc();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_sub();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_sbb();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_ana();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_xra();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_ora();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_cmp();
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c134(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parserotateAccInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_rlc();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_rrc();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_ral();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_rar();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c132(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseregPairInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_push();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_pop();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_dad();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_inx();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_dcx();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_xchg();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_xthl();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_sphl();
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c135(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseimmediateInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_lxi();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_mvi();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_adi();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_aci();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_sui();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_sbi();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_ani();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_xri();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseop_ori();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseop_cpi();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c136(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedirectAddressingInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_sta();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_lda();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_shld();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_lhld();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c137(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsejumpInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_pchl();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_jmp();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_jc();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_jnc();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_jz();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_jnz();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_jp();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_jm();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseop_jpe();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseop_jpo();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c138(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecallInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_call();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_cc();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_cnc();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_cz();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_cnz();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_cp();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_cm();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_cpe();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseop_cpo();
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c139(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsereturnInstructions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_ret();
    if (s1 === peg$FAILED) {
      s1 = peg$parseop_rc();
      if (s1 === peg$FAILED) {
        s1 = peg$parseop_rnc();
        if (s1 === peg$FAILED) {
          s1 = peg$parseop_rz();
          if (s1 === peg$FAILED) {
            s1 = peg$parseop_rnz();
            if (s1 === peg$FAILED) {
              s1 = peg$parseop_rm();
              if (s1 === peg$FAILED) {
                s1 = peg$parseop_rp();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseop_rpe();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseop_rpo();
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c140(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsehaltInstruction() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseop_hlt();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c140(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseop_stc() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c141) {
      s0 = peg$c141;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c142); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c143) {
        s0 = peg$c143;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
    }

    return s0;
  }

  function peg$parseop_cmc() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c145) {
      s0 = peg$c145;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c146); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c147) {
        s0 = peg$c147;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }
    }

    return s0;
  }

  function peg$parseop_cma() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c149) {
      s0 = peg$c149;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c150); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c151) {
        s0 = peg$c151;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }
    }

    return s0;
  }

  function peg$parseop_daa() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c153) {
      s0 = peg$c153;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c154); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c155) {
        s0 = peg$c155;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
    }

    return s0;
  }

  function peg$parseop_sphl() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c157) {
      s0 = peg$c157;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c158); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c159) {
        s0 = peg$c159;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c160); }
      }
    }

    return s0;
  }

  function peg$parseop_pchl() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c161) {
      s0 = peg$c161;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c162); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c163) {
        s0 = peg$c163;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }
    }

    return s0;
  }

  function peg$parseop_hlt() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c165) {
      s0 = peg$c165;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c166); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c167) {
        s0 = peg$c167;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c168); }
      }
    }

    return s0;
  }

  function peg$parseop_rlc() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c169) {
      s0 = peg$c169;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c170); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c171) {
        s0 = peg$c171;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c172); }
      }
    }

    return s0;
  }

  function peg$parseop_rrc() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c173) {
      s0 = peg$c173;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c174); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c175) {
        s0 = peg$c175;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c176); }
      }
    }

    return s0;
  }

  function peg$parseop_rar() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c177) {
      s0 = peg$c177;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c179) {
        s0 = peg$c179;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c180); }
      }
    }

    return s0;
  }

  function peg$parseop_ral() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c181) {
      s0 = peg$c181;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c182); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c183) {
        s0 = peg$c183;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
    }

    return s0;
  }

  function peg$parseop_ret() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c185) {
      s0 = peg$c185;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c186); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c187) {
        s0 = peg$c187;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c188); }
      }
    }

    return s0;
  }

  function peg$parseop_rc() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c189) {
      s0 = peg$c189;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c190); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c191) {
        s0 = peg$c191;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
    }

    return s0;
  }

  function peg$parseop_rnc() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c193) {
      s0 = peg$c193;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c194); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c195) {
        s0 = peg$c195;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c196); }
      }
    }

    return s0;
  }

  function peg$parseop_rz() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c197) {
      s0 = peg$c197;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c198); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c199) {
        s0 = peg$c199;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c200); }
      }
    }

    return s0;
  }

  function peg$parseop_rnz() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c201) {
      s0 = peg$c201;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c202); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c203) {
        s0 = peg$c203;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }
    }

    return s0;
  }

  function peg$parseop_rp() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c205) {
      s0 = peg$c205;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c206); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c207) {
        s0 = peg$c207;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c208); }
      }
    }

    return s0;
  }

  function peg$parseop_rm() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c209) {
      s0 = peg$c209;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c210); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c211) {
        s0 = peg$c211;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }
    }

    return s0;
  }

  function peg$parseop_rpe() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c213) {
      s0 = peg$c213;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c214); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c215) {
        s0 = peg$c215;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c216); }
      }
    }

    return s0;
  }

  function peg$parseop_rpo() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c217) {
      s0 = peg$c217;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c218); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c219) {
        s0 = peg$c219;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c220); }
      }
    }

    return s0;
  }

  function peg$parseop_xchg() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c221) {
      s0 = peg$c221;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c222); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c223) {
        s0 = peg$c223;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c224); }
      }
    }

    return s0;
  }

  function peg$parseop_xthl() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c225) {
      s0 = peg$c225;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c226); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c227) {
        s0 = peg$c227;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c228); }
      }
    }

    return s0;
  }

  function peg$parseop_ei() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c229) {
      s0 = peg$c229;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c230); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c231) {
        s0 = peg$c231;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c232); }
      }
    }

    return s0;
  }

  function peg$parseop_di() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c233) {
      s0 = peg$c233;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c234); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c235) {
        s0 = peg$c235;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c236); }
      }
    }

    return s0;
  }

  function peg$parseop_nop() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c237) {
      s0 = peg$c237;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c238); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c239) {
        s0 = peg$c239;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c240); }
      }
    }

    return s0;
  }

  function peg$parseop_inr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c241) {
      s1 = peg$c241;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c242); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c243) {
        s1 = peg$c243;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c244); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_dcr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c245) {
      s1 = peg$c245;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c246); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c247) {
        s1 = peg$c247;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c248); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_stax() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c249) {
      s1 = peg$c249;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c250); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c251) {
        s1 = peg$c251;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c252); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPairB();
        if (s3 === peg$FAILED) {
          s3 = peg$parseregisterPairD();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_ldax() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c253) {
      s1 = peg$c253;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c255) {
        s1 = peg$c255;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c256); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPairB();
        if (s3 === peg$FAILED) {
          s3 = peg$parseregisterPairD();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_add() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c257) {
      s1 = peg$c257;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c258); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c259) {
        s1 = peg$c259;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c260); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_adc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c261) {
      s1 = peg$c261;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c262); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c263) {
        s1 = peg$c263;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c264); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_sub() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c265) {
      s1 = peg$c265;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c266); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c267) {
        s1 = peg$c267;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c268); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_sbb() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c269) {
      s1 = peg$c269;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c270); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c271) {
        s1 = peg$c271;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c272); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_ana() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c273) {
      s1 = peg$c273;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c274); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c275) {
        s1 = peg$c275;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c276); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_xra() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c277) {
      s1 = peg$c277;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c278); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c279) {
        s1 = peg$c279;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c280); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_ora() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c281) {
      s1 = peg$c281;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c282); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c283) {
        s1 = peg$c283;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c284); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cmp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c285) {
      s1 = peg$c285;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c286); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c287) {
        s1 = peg$c287;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c288); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_push() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c289) {
      s1 = peg$c289;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c290); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c291) {
        s1 = peg$c291;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c292); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parseregisterPairPSW();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_pop() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c293) {
      s1 = peg$c293;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c294); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c295) {
        s1 = peg$c295;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c296); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parseregisterPairPSW();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_dad() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c297) {
      s1 = peg$c297;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c298); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c299) {
        s1 = peg$c299;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c300); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parsestackPointer();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_inx() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c301) {
      s1 = peg$c301;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c302); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c303) {
        s1 = peg$c303;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c304); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parsestackPointer();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_dcx() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c305) {
      s1 = peg$c305;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c306); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c307) {
        s1 = peg$c307;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c308); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregisterPair();
        if (s3 === peg$FAILED) {
          s3 = peg$parsestackPointer();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_adi() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c309) {
      s1 = peg$c309;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c310); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c311) {
        s1 = peg$c311;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c312); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata8();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_aci() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c313) {
      s1 = peg$c313;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c314); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c315) {
        s1 = peg$c315;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c316); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata8();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_sui() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c317) {
      s1 = peg$c317;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c318); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c319) {
        s1 = peg$c319;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c320); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata8();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_sbi() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c321) {
      s1 = peg$c321;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c322); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c323) {
        s1 = peg$c323;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c324); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata8();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_ani() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c325) {
      s1 = peg$c325;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c326); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c327) {
        s1 = peg$c327;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c328); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata8();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_xri() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c329) {
      s1 = peg$c329;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c330); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c331) {
        s1 = peg$c331;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c332); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata8();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_ori() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c333) {
      s1 = peg$c333;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c334); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c335) {
        s1 = peg$c335;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c336); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata8();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cpi() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c337) {
      s1 = peg$c337;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c338); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c339) {
        s1 = peg$c339;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c340); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata8();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_sta() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c341) {
      s1 = peg$c341;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c342); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c343) {
        s1 = peg$c343;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c344); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_lda() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c345) {
      s1 = peg$c345;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c346); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c347) {
        s1 = peg$c347;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c348); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_shld() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c349) {
      s1 = peg$c349;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c350); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c351) {
        s1 = peg$c351;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c352); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_lhld() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c353) {
      s1 = peg$c353;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c354); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c355) {
        s1 = peg$c355;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c356); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jmp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c357) {
      s1 = peg$c357;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c358); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c359) {
        s1 = peg$c359;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c361) {
      s1 = peg$c361;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c362); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c363) {
        s1 = peg$c363;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c364); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jnc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c365) {
      s1 = peg$c365;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c366); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c367) {
        s1 = peg$c367;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c368); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jz() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c369) {
      s1 = peg$c369;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c370); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c371) {
        s1 = peg$c371;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c372); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jnz() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c373) {
      s1 = peg$c373;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c374); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c375) {
        s1 = peg$c375;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c376); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jm() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c377) {
      s1 = peg$c377;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c378); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c379) {
        s1 = peg$c379;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c380); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c381) {
      s1 = peg$c381;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c382); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c383) {
        s1 = peg$c383;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c384); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jpe() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c385) {
      s1 = peg$c385;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c386); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c387) {
        s1 = peg$c387;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c388); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_jpo() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c389) {
      s1 = peg$c389;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c390); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c391) {
        s1 = peg$c391;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c392); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_call() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c393) {
      s1 = peg$c393;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c394); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c395) {
        s1 = peg$c395;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c396); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c397) {
      s1 = peg$c397;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c398); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c399) {
        s1 = peg$c399;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c400); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cnc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c401) {
      s1 = peg$c401;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c402); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c403) {
        s1 = peg$c403;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c404); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cz() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c405) {
      s1 = peg$c405;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c406); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c407) {
        s1 = peg$c407;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c408); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cnz() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c409) {
      s1 = peg$c409;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c410); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c411) {
        s1 = peg$c411;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c412); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cm() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c413) {
      s1 = peg$c413;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c414); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c415) {
        s1 = peg$c415;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c416); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c417) {
      s1 = peg$c417;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c418); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c419) {
        s1 = peg$c419;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c420); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cpe() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c421) {
      s1 = peg$c421;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c422); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c423) {
        s1 = peg$c423;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c424); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_cpo() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c425) {
      s1 = peg$c425;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c426); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c427) {
        s1 = peg$c427;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c428); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsedata16();
          if (s3 === peg$FAILED) {
            s3 = peg$parselabel();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_mov() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c429) {
      s1 = peg$c429;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c430); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c431) {
        s1 = peg$c431;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c432); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            if (peg$c433.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c434); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseregister();
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_lxi() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c435) {
      s1 = peg$c435;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c436); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c437) {
        s1 = peg$c437;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c438); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            if (peg$c433.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c434); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpression();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsedata16();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parselabel();
                  }
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseop_mvi() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c439) {
      s1 = peg$c439;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c440); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c441) {
        s1 = peg$c441;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c442); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseregister();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsewhitespace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsewhitespace();
          }
          if (s4 !== peg$FAILED) {
            if (peg$c433.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c434); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsewhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsewhitespace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpression();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsedata8();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parselabel();
                  }
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      var machineCode = [];
      var symbolTable = {};
      var ilc = 0;
      var mnemonics = {
          "nop"       : {code:0x00,size:1},
          "lxi b,d16" : {code:0x01,size:3},
          "stax b"    : {code:0x02,size:1},
          "inx b"     : {code:0x03,size:1},
          "inr b"     : {code:0x04,size:1},
          "dcr b"     : {code:0x05,size:1},
          "mvi b,d8"  : {code:0x06,size:2},
          "rlc"       : {code:0x07,size:1},
          "dad b"     : {code:0x09,size:1},
          "ldax b"    : {code:0x0A,size:1},
          "dcx b"     : {code:0x0B,size:1},
          "inr c"     : {code:0x0C,size:1},
          "dcr c"     : {code:0x0D,size:1},
          "mvi c,d8"  : {code:0x0E,size:2},
          "rrc"       : {code:0x0F,size:1},
          "lxi d,d16" : {code:0x11,size:3},
          "stax d"    : {code:0x12,size:1},
          "inx d"     : {code:0x13,size:1},
          "inr d"     : {code:0x14,size:1},
          "dcr d"     : {code:0x15,size:1},
          "mvi d,d8"  : {code:0x16,size:2},
          "ral"       : {code:0x17,size:1},
          "dad d"     : {code:0x19,size:1},
          "ldax d"    : {code:0x1A,size:1},
          "dcx d"     : {code:0x1B,size:1},
          "inr e"     : {code:0x1C,size:1},
          "dcr e"     : {code:0x1D,size:1},
          "mvi e,d8"  : {code:0x1E,size:2},
          "rar"       : {code:0x1F,size:1},
          "rim"       : {code:0x20,size:1},
          "lxi h,d16" : {code:0x21,size:3},
          "shld adr"  : {code:0x22,size:3},
          "inx h"     : {code:0x23,size:1},
          "inr h"     : {code:0x24,size:1},
          "dcr h"     : {code:0x25,size:1},
          "mvi h,d8"  : {code:0x26,size:2},
          "daa"       : {code:0x27,size:1},
          "dad h"     : {code:0x29,size:1},
          "lhld adr"  : {code:0x2A,size:3},
          "dcx h"     : {code:0x2B,size:1},
          "inr l"     : {code:0x2C,size:1},
          "dcr l"     : {code:0x2D,size:1},
          "mvi l,d8"  : {code:0x2E,size:2},
          "cma"       : {code:0x2F,size:1},
          "sim"       : {code:0x30,size:1},
          "lxi sp,d16": {code:0x31,size:3},
          "sta adr"   : {code:0x32,size:3},
          "inx sp"    : {code:0x33,size:1},
          "inr m"     : {code:0x34,size:1},
          "dcr m"     : {code:0x35,size:1},
          "mvi m,d8"  : {code:0x36,size:2},
          "stc"       : {code:0x37,size:1},
          "dad sp"    : {code:0x39,size:1},
          "lda adr"   : {code:0x3A,size:3},
          "dcx sp"    : {code:0x3B,size:1},
          "inr a"     : {code:0x3C,size:1},
          "dcr a"     : {code:0x3D,size:1},
          "mvi a,d8"  : {code:0x3E,size:2},
          "cmc"       : {code:0x3F,size:1},
          "mov b,b"   : {code:0x40,size:1},
          "mov b,c"   : {code:0x41,size:1},
          "mov b,d"   : {code:0x42,size:1},
          "mov b,e"   : {code:0x43,size:1},
          "mov b,h"   : {code:0x44,size:1},
          "mov b,l"   : {code:0x45,size:1},
          "mov b,m"   : {code:0x46,size:1},
          "mov b,a"   : {code:0x47,size:1},
          "mov c,b"   : {code:0x48,size:1},
          "mov c,c"   : {code:0x49,size:1},
          "mov c,d"   : {code:0x4A,size:1},
          "mov c,e"   : {code:0x4B,size:1},
          "mov c,h"   : {code:0x4C,size:1},
          "mov c,l"   : {code:0x4D,size:1},
          "mov c,m"   : {code:0x4E,size:1},
          "mov c,a"   : {code:0x4F,size:1},
          "mov d,b"   : {code:0x50,size:1},
          "mov d,c"   : {code:0x51,size:1},
          "mov d,d"   : {code:0x52,size:1},
          "mov d,e"   : {code:0x53,size:1},
          "mov d,h"   : {code:0x54,size:1},
          "mov d,l"   : {code:0x55,size:1},
          "mov d,m"   : {code:0x56,size:1},
          "mov d,a"   : {code:0x57,size:1},
          "mov e,b"   : {code:0x58,size:1},
          "mov e,c"   : {code:0x59,size:1},
          "mov e,d"   : {code:0x5A,size:1},
          "mov e,e"   : {code:0x5B,size:1},
          "mov e,h"   : {code:0x5C,size:1},
          "mov e,l"   : {code:0x5D,size:1},
          "mov e,m"   : {code:0x5E,size:1},
          "mov e,a"   : {code:0x5F,size:1},
          "mov h,b"   : {code:0x60,size:1},
          "mov h,c"   : {code:0x61,size:1},
          "mov h,d"   : {code:0x62,size:1},
          "mov h,e"   : {code:0x63,size:1},
          "mov h,h"   : {code:0x64,size:1},
          "mov h,l"   : {code:0x65,size:1},
          "mov h,m"   : {code:0x66,size:1},
          "mov h,a"   : {code:0x67,size:1},
          "mov l,b"   : {code:0x68,size:1},
          "mov l,c"   : {code:0x69,size:1},
          "mov l,d"   : {code:0x6A,size:1},
          "mov l,e"   : {code:0x6B,size:1},
          "mov l,h"   : {code:0x6C,size:1},
          "mov l,l"   : {code:0x6D,size:1},
          "mov l,m"   : {code:0x6E,size:1},
          "mov l,a"   : {code:0x6F,size:1},
          "mov m,b"   : {code:0x70,size:1},
          "mov m,c"   : {code:0x71,size:1},
          "mov m,d"   : {code:0x72,size:1},
          "mov m,e"   : {code:0x73,size:1},
          "mov m,h"   : {code:0x74,size:1},
          "mov m,l"   : {code:0x75,size:1},
          "hlt"       : {code:0x76,size:1},
          "mov m,a"   : {code:0x77,size:1},
          "mov a,b"   : {code:0x78,size:1},
          "mov a,c"   : {code:0x79,size:1},
          "mov a,d"   : {code:0x7A,size:1},
          "mov a,e"   : {code:0x7B,size:1},
          "mov a,h"   : {code:0x7C,size:1},
          "mov a,l"   : {code:0x7D,size:1},
          "mov a,m"   : {code:0x7E,size:1},
          "mov a,a"   : {code:0x7F,size:1},
          "add b"     : {code:0x80,size:1},
          "add c"     : {code:0x81,size:1},
          "add d"     : {code:0x82,size:1},
          "add e"     : {code:0x83,size:1},
          "add h"     : {code:0x84,size:1},
          "add l"     : {code:0x85,size:1},
          "add m"     : {code:0x86,size:1},
          "add a"     : {code:0x87,size:1},
          "adc b"     : {code:0x88,size:1},
          "adc c"     : {code:0x89,size:1},
          "adc d"     : {code:0x8A,size:1},
          "adc e"     : {code:0x8B,size:1},
          "adc h"     : {code:0x8C,size:1},
          "adc l"     : {code:0x8D,size:1},
          "adc m"     : {code:0x8E,size:1},
          "adc a"     : {code:0x8F,size:1},
          "sub b"     : {code:0x90,size:1},
          "sub c"     : {code:0x91,size:1},
          "sub d"     : {code:0x92,size:1},
          "sub e"     : {code:0x93,size:1},
          "sub h"     : {code:0x94,size:1},
          "sub l"     : {code:0x95,size:1},
          "sub m"     : {code:0x96,size:1},
          "sub a"     : {code:0x97,size:1},
          "sbb b"     : {code:0x98,size:1},
          "sbb c"     : {code:0x99,size:1},
          "sbb d"     : {code:0x9A,size:1},
          "sbb e"     : {code:0x9B,size:1},
          "sbb h"     : {code:0x9C,size:1},
          "sbb l"     : {code:0x9D,size:1},
          "sbb m"     : {code:0x9E,size:1},
          "sbb a"     : {code:0x9F,size:1},
          "ana b"     : {code:0xA0,size:1},
          "ana c"     : {code:0xA1,size:1},
          "ana d"     : {code:0xA2,size:1},
          "ana e"     : {code:0xA3,size:1},
          "ana h"     : {code:0xA4,size:1},
          "ana l"     : {code:0xA5,size:1},
          "ana m"     : {code:0xA6,size:1},
          "ana a"     : {code:0xA7,size:1},
          "xra b"     : {code:0xA8,size:1},
          "xra c"     : {code:0xA9,size:1},
          "xra d"     : {code:0xAA,size:1},
          "xra e"     : {code:0xAB,size:1},
          "xra h"     : {code:0xAC,size:1},
          "xra l"     : {code:0xAD,size:1},
          "xra m"     : {code:0xAE,size:1},
          "xra a"     : {code:0xAF,size:1},
          "ora b"     : {code:0xB0,size:1},
          "ora c"     : {code:0xB1,size:1},
          "ora d"     : {code:0xB2,size:1},
          "ora e"     : {code:0xB3,size:1},
          "ora h"     : {code:0xB4,size:1},
          "ora l"     : {code:0xB5,size:1},
          "ora m"     : {code:0xB6,size:1},
          "ora a"     : {code:0xB7,size:1},
          "cmp b"     : {code:0xB8,size:1},
          "cmp c"     : {code:0xB9,size:1},
          "cmp d"     : {code:0xBA,size:1},
          "cmp e"     : {code:0xBB,size:1},
          "cmp h"     : {code:0xBC,size:1},
          "cmp l"     : {code:0xBD,size:1},
          "cmp m"     : {code:0xBE,size:1},
          "cmp a"     : {code:0xBF,size:1},
          "rnz"       : {code:0xC0,size:1},
          "pop b"     : {code:0xC1,size:1},
          "jnz adr"   : {code:0xC2,size:3},
          "jmp adr"   : {code:0xC3,size:3},
          "cnz adr"   : {code:0xC4,size:3},
          "push b"    : {code:0xC5,size:1},
          "adi d8"    : {code:0xC6,size:2},
          "rst 0"     : {code:0xC7,size:1},
          "rz"        : {code:0xC8,size:1},
          "ret"       : {code:0xC9,size:1},
          "jz adr"    : {code:0xCA,size:3},
          "cz adr"    : {code:0xCC,size:3},
          "call adr"  : {code:0xCD,size:3},
          "aci d8"    : {code:0xCE,size:2},
          "rst 1"     : {code:0xCF,size:1},
          "rnc"       : {code:0xD0,size:1},
          "pop d"     : {code:0xD1,size:1},
          "jnc adr"   : {code:0xD2,size:3},
          "out d8"    : {code:0xD3,size:2},
          "cnc adr"   : {code:0xD4,size:3},
          "push d"    : {code:0xD5,size:1},
          "sui d8"    : {code:0xD6,size:2},
          "rst 2"     : {code:0xD7,size:1},
          "rc"        : {code:0xD8,size:1},
          "jc adr"    : {code:0xDA,size:3},
          "in d8"     : {code:0xDB,size:2},
          "cc adr"    : {code:0xDC,size:3},
          "sbi d8"    : {code:0xDE,size:2},
          "rst 3"     : {code:0xDF,size:1},
          "rpo"       : {code:0xE0,size:1},
          "pop h"     : {code:0xE1,size:1},
          "jpo adr"   : {code:0xE2,size:3},
          "xthl"      : {code:0xE3,size:1},
          "cpo adr"   : {code:0xE4,size:3},
          "push h"    : {code:0xE5,size:1},
          "ani d8"    : {code:0xE6,size:2},
          "rst 4"     : {code:0xE7,size:1},
          "rpe"       : {code:0xE8,size:1},
          "pchl"      : {code:0xE9,size:1},
          "jpe adr"   : {code:0xEA,size:3},
          "xchg"      : {code:0xEB,size:1},
          "cpe adr"   : {code:0xEC,size:3},
          "xri d8"    : {code:0xEE,size:2},
          "rst 5"     : {code:0xEF,size:1},
          "rp"        : {code:0xF0,size:1},
          "pop psw"   : {code:0xF1,size:1},
          "jp adr"    : {code:0xF2,size:3},
          "di"        : {code:0xF3,size:1},
          "cp adr"    : {code:0xF4,size:3},
          "push psw"  : {code:0xF5,size:1},
          "ori d8"    : {code:0xF6,size:2},
          "rst 6"     : {code:0xF7,size:1},
          "rm"        : {code:0xF8,size:1},
          "sphl"      : {code:0xF9,size:1},
          "jm adr"    : {code:0xFA,size:3},
          "ei"        : {code:0xFB,size:1},
          "cm adr"    : {code:0xFC,size:3},
          "cpi d8"    : {code:0xFE,size:2},
          "rst 7"     : {code:0xFF,size:1}
      };

      var twosComplement = function (d8) {
          return (0xFF + d8 + 1);
      };


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
